<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>BZOJ 2219 数论之神</title>
      <link href="/2018/08/04/BZOJ2219/"/>
      <url>/2018/08/04/BZOJ2219/</url>
      <content type="html"><![CDATA[<h2 id="description">Description</h2><p>给定正整数<span class="math inline">\(A, B, K\)</span>，求方程<span class="math inline">\(x^A\equiv B\pmod{2K+1}\)</span>在<span class="math inline">\(Z_{2K+1}\)</span>中的解的数量。</p><p>多组询问，组数不超过1000。</p><p><span class="math inline">\(1\leq A,B\leq 10^9, 1\leq K\leq 5\times 10^8\)</span>。</p><a id="more"></a><h2 id="solution">Solution</h2><p>算是一道综合性很强的题目了……</p><p>先将模数分解质因数，对每一种质因子幂单独求解，然后由中国剩余定理之类的知道最后的解数是每一部分的解数的积。</p><p>那么考虑每种质因子的幂<span class="math inline">\(m=p^c\)</span>的解数。先把<span class="math inline">\(B\)</span>取下模，要是<span class="math inline">\(B = 0\)</span>的话那么<span class="math inline">\(x\)</span>是<span class="math inline">\(p^{\lceil\frac{c}{A}\rceil}\)</span>的倍数就行了，因此答案是<span class="math inline">\(p^{c-\lceil\frac{c}{A}\rceil}\)</span>。</p><p>那么考虑<span class="math inline">\(B\neq 0\)</span>的情况。你可以对两边取指标（因为<span class="math inline">\(m\)</span>事奇质数的幂，所以一定有原根，原根当然很好找了），就得到了<span class="math inline">\(A\mathrm{ind}x\equiv\mathrm{ind}B\pmod{\varphi(m)}\)</span>，然后根据线性同余方程那套理论，假设<span class="math inline">\(d=\gcd(A,\varphi(m))\)</span>，如果<span class="math inline">\(d|\mathrm{ind}B\)</span>才有解，且解的数量为<span class="math inline">\(d\)</span>。</p><p>但是有一个问题就是可能有<span class="math inline">\(\gcd(B, m)&gt;1\)</span>，这样的话<span class="math inline">\(\mathrm{ind}B\)</span>就不一定存在。那么我们在原始的式子里，把两边疯狂除<span class="math inline">\(p\)</span>直到右边没有<span class="math inline">\(p\)</span>了，那么假设<span class="math inline">\(B=p^su\)</span>，那么可知新的方程为<span class="math inline">\(\frac{x^A}{p^s}\equiv u\pmod{p^{c - s}}\)</span>。可以发现如果<span class="math inline">\(A\)</span>不是<span class="math inline">\(s\)</span>的因子的话那么凉了，要是是的话假设<span class="math inline">\(s = At\)</span>，那么新的方程也可以写作<span class="math inline">\((\frac{x}{p^t})^A\equiv u\pmod{p^{c - s}}\)</span>，这样的话就得到了一个新的方程，且<span class="math inline">\(u\)</span>和现在的模数是互质的，因此可以直接用上面的方法做。需要注意的是我们现在只是求出了模<span class="math inline">\(p^{c-s}\)</span>的解数，对应到<span class="math inline">\(p^c\)</span>要乘上<span class="math inline">\(p^s\)</span>。但是解肯定要乘上一个<span class="math inline">\(p^t\)</span>，因此解数还要在除一下<span class="math inline">\(p^t\)</span>。</p><h2 id="code">Code</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cassert&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tr1/unordered_map&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="function">ll <span class="title">gcd</span><span class="params">(ll a, ll b)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(!b) &#123;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> gcd(b, a % b);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">exgcd</span><span class="params">(ll a, ll b, ll &amp;d, ll &amp;x, ll &amp;y)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(!b) &#123;</span><br><span class="line">    d = a; x = <span class="number">1</span>; y = <span class="number">0</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    ll nx, ny; exgcd(b, a % b, d, nx, ny);</span><br><span class="line">    x = ny; y = nx - ny * (a / b);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">inv</span><span class="params">(ll v, ll p)</span> </span>&#123;</span><br><span class="line">  ll d, x, y; exgcd(v, p, d, x, y);</span><br><span class="line">  <span class="keyword">return</span> (x + p) % p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">pow_mod</span><span class="params">(ll a, ll b, ll p)</span> </span>&#123;</span><br><span class="line">  ll ans = <span class="number">1</span>, res = a;</span><br><span class="line">  <span class="keyword">while</span>(b) &#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="number">1L</span>L &amp; b) ans = ans * res % p;</span><br><span class="line">    res = res * res % p; b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">desc</span><span class="params">(ll x, <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;V)</span> </span>&#123;</span><br><span class="line">  ll bd = <span class="built_in">floor</span>(<span class="built_in">sqrt</span>((<span class="keyword">double</span>)x) + <span class="number">0.5</span>);</span><br><span class="line">  <span class="keyword">for</span>(ll i = <span class="number">2</span>; i &lt;= bd; i ++) &#123;</span><br><span class="line">    <span class="keyword">if</span>(x % i == <span class="number">0L</span>L) &#123;</span><br><span class="line">      V.push_back(i);</span><br><span class="line">      <span class="keyword">while</span>(x % i == <span class="number">0L</span>L) x /= i;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(x &gt; <span class="number">1L</span>L) V.push_back(<span class="keyword">int</span>(x));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">find_g</span><span class="params">(ll p, ll phi, <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;V)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(p == <span class="number">2L</span>L) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span>(ll i = <span class="number">2</span>; i &lt; p; i ++) &#123;</span><br><span class="line">    <span class="keyword">bool</span> ok = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; V.size(); j ++) &#123;</span><br><span class="line">      ll c = phi / (ll)V[j];</span><br><span class="line">      <span class="keyword">if</span>(pow_mod(i, c, p) == <span class="number">1L</span>L) &#123;</span><br><span class="line">        ok = <span class="literal">false</span>; <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(ok) <span class="keyword">return</span> i;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">-1L</span>L;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">bsgs</span><span class="params">(ll a, ll b, ll p)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(a == <span class="number">0L</span>L) &#123;</span><br><span class="line">    <span class="keyword">return</span> (b == <span class="number">0L</span>L) ? <span class="number">1L</span>L : <span class="number">-1L</span>L;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">int</span> bd = <span class="built_in">ceil</span>(<span class="built_in">sqrt</span>((<span class="keyword">double</span>)p));</span><br><span class="line">  <span class="built_in">std</span>::tr1::<span class="built_in">unordered_map</span>&lt;ll, ll&gt; ma;</span><br><span class="line">  ll blk = <span class="number">1L</span>L;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; bd; i ++) &#123;</span><br><span class="line">    <span class="keyword">if</span>(!ma.count(blk)) ma[blk] = i;</span><br><span class="line">    blk = blk * a % p;</span><br><span class="line">  &#125;</span><br><span class="line">  ll bs = <span class="number">1L</span>L; blk = inv(blk, p);</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; (ll)i * (ll)bd &lt; p; i ++) &#123;</span><br><span class="line">    ll th = b * bs % p;</span><br><span class="line">    <span class="keyword">if</span>(ma.count(th)) <span class="keyword">return</span> ma[th] + i * bd;</span><br><span class="line">    bs = bs * blk % p;</span><br><span class="line">  &#125;</span><br><span class="line">  assert(<span class="literal">false</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">equation</span><span class="params">(ll a, ll b, ll p)</span> </span>&#123;</span><br><span class="line">  ll ret = gcd(a, p);</span><br><span class="line">  <span class="keyword">if</span>(b % ret != <span class="number">0L</span>L) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">solve</span><span class="params">(ll a, ll b, ll mod, ll p, ll c)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(b == <span class="number">0L</span>L) &#123;</span><br><span class="line">    ll ret = <span class="built_in">ceil</span>((<span class="keyword">double</span>(c)) / (<span class="keyword">double</span>(a)));</span><br><span class="line">    <span class="keyword">return</span> pow_mod(p, c - ret, <span class="number">2000000007L</span>L);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(b % p == <span class="number">0L</span>L) &#123;</span><br><span class="line">      ll nc = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">while</span>(b % p == <span class="number">0L</span>L) nc ++, b /= p, mod /= p;</span><br><span class="line">      <span class="keyword">if</span>(nc % a != <span class="number">0L</span>L) <span class="keyword">return</span> <span class="number">0L</span>L;</span><br><span class="line">      ll t = nc / a;</span><br><span class="line">      <span class="keyword">return</span> solve(a, b, mod, p, c - nc) * pow_mod(p, (a - <span class="number">1L</span>L) * t, <span class="number">2000000007L</span>L);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      ll phi = mod / p * (p - <span class="number">1L</span>L);</span><br><span class="line">      <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; d_phi; desc(phi, d_phi);</span><br><span class="line">      ll g = find_g(mod, phi, d_phi);</span><br><span class="line">      <span class="keyword">return</span> equation(a, bsgs(g, b, mod), phi);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> T; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</span><br><span class="line">  <span class="keyword">while</span>(T --) &#123;</span><br><span class="line">    <span class="keyword">int</span> a, b, k; <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;a, &amp;b, &amp;k);</span><br><span class="line">    k = <span class="number">2</span> * k + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> bd = <span class="built_in">floor</span>(<span class="built_in">sqrt</span>((<span class="keyword">double</span>)k) + <span class="number">0.5</span>);</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= bd; i ++) &#123;</span><br><span class="line">      <span class="keyword">if</span>(k % i == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> c = <span class="number">0</span>, mod = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(k % i == <span class="number">0</span>) k /= i, c ++, mod *= i;</span><br><span class="line">        ans *= solve(a, b % mod, mod, i, c);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(k &gt; <span class="number">1</span>) ans *= solve(a, b % k, k, k, <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BZOJ </tag>
            
            <tag> BSGS </tag>
            
            <tag> 原根 </tag>
            
            <tag> 指标 </tag>
            
            <tag> 同余方程 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>LibreOJ 2014 「SCOI2016」萌萌哒</title>
      <link href="/2018/08/02/loj2014/"/>
      <url>/2018/08/02/loj2014/</url>
      <content type="html"><![CDATA[<h2 id="description">Description</h2><p>有一个长度为<span class="math inline">\(n\)</span>的无前导零数字串。</p><p>现在给你<span class="math inline">\(m\)</span>组信息，形如<span class="math inline">\((a,b,c,d)\)</span>（保证<span class="math inline">\(a\leq b, c\leq d,b - a = d - c\)</span>），表示数字串<span class="math inline">\(a\ldots b\)</span>这一段子串和<span class="math inline">\(c\ldots d\)</span>这一段子串是一样的。</p><p>求最后的数字串有多少种可能。</p><p><span class="math inline">\(1\leq n, m\leq 10^5, 1\leq a,b,c,d\leq n\)</span>。</p><a id="more"></a><h2 id="solution">Solution</h2><p>ao劲啊这种题，，，</p><p>肯定要上并查集辣……但是暴力建图一定会炸，线段树优化建图在这也不好用（两边子树的形态可能差异巨大）。那么考虑用倍增优化建图。</p><p>建出形如<span class="math inline">\(v(i, j)\)</span>的点表示从<span class="math inline">\(i\)</span>开始长度为<span class="math inline">\(2^j\)</span>的子串。然后这样用类似于ST表的方式就可以处理所有信息了，具体方式就是把对应的两组点在并查集上连一下。</p><p>然后考虑最后如何统计答案。这个也不难，你把并查集的关系逐层往下推就行。</p><h2 id="code">Code</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">100005</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxs = maxn * <span class="number">17</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> ll = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"><span class="keyword">const</span> ll ha = <span class="number">1000000007L</span>L;</span><br><span class="line"><span class="function">ll <span class="title">pow_mod</span><span class="params">(ll a, ll b)</span> </span>&#123;</span><br><span class="line">  ll ans = <span class="number">1L</span>L, res = a;</span><br><span class="line">  <span class="keyword">while</span>(b) &#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="number">1L</span>L &amp; b) ans = ans * res % ha;</span><br><span class="line">    res = res * res % ha; b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> p[maxs], rk[maxs];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init_set</span><span class="params">(<span class="keyword">int</span> s)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= s; i ++) &#123;</span><br><span class="line">    p[i] = i; rk[i] = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_fa</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(p[x] == x) &#123;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (p[x] = get_fa(p[x]));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">link_set</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(rk[x] &gt; rk[y]) <span class="built_in">std</span>::swap(x, y);</span><br><span class="line">  p[x] = y; <span class="keyword">if</span>(rk[x] == rk[y]) rk[y] ++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge_set</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">  x = get_fa(x); y = get_fa(y);</span><br><span class="line">  <span class="keyword">if</span>(x != y) link_set(x, y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, cnt;</span><br><span class="line"><span class="keyword">int</span> lst[maxn];</span><br><span class="line"><span class="keyword">int</span> num[maxn][<span class="number">17</span>], lc[maxs], rc[maxs];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">process</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  lst[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i ++) &#123;</span><br><span class="line">    lst[i] = lst[i - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">while</span>((<span class="number">1</span> &lt;&lt; (lst[i] + <span class="number">1</span>)) &lt;= i) lst[i] ++;</span><br><span class="line">  &#125;</span><br><span class="line">  cnt = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; (<span class="number">1</span> &lt;&lt; j) &lt;= n; j ++) &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i + (<span class="number">1</span> &lt;&lt; j) - <span class="number">1</span> &lt;= n; i ++) &#123;</span><br><span class="line">      num[i][j] = ++ cnt;</span><br><span class="line">      <span class="keyword">if</span>(j &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        lc[cnt] = num[i][j - <span class="number">1</span>];</span><br><span class="line">        rc[cnt] = num[i + (<span class="number">1</span> &lt;&lt; (j - <span class="number">1</span>))][j - <span class="number">1</span>];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  init_set(cnt);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> c, <span class="keyword">int</span> d)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> g = lst[b - a + <span class="number">1</span>];</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Operation (%d, %d, %d, %d) %d\n"</span>, a, b, c, d, g);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">  merge_set(num[a][g], num[c][g]);</span><br><span class="line">  merge_set(num[b - (<span class="number">1</span> &lt;&lt; g) + <span class="number">1</span>][g], num[d - (<span class="number">1</span> &lt;&lt; g) + <span class="number">1</span>][g]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> m; <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</span><br><span class="line">  process();</span><br><span class="line">  <span class="keyword">while</span>(m --) &#123;</span><br><span class="line">    <span class="keyword">int</span> a, b, c, d;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>, &amp;a, &amp;b, &amp;c, &amp;d);</span><br><span class="line">    update(a, b, c, d);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = cnt; i &gt; n; i --) &#123;</span><br><span class="line">    <span class="keyword">int</span> fa = get_fa(i);</span><br><span class="line">    merge_set(lc[i], lc[fa]);</span><br><span class="line">    merge_set(rc[i], rc[fa]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">int</span> blk = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) &#123;</span><br><span class="line">    <span class="keyword">if</span>(get_fa(i) == i) blk ++;</span><br><span class="line">  &#125;</span><br><span class="line">  ll ans = <span class="number">9L</span>L * pow_mod(<span class="number">10L</span>L, blk - <span class="number">1</span>) % ha;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LibreOJ </tag>
            
            <tag> SCOI </tag>
            
            <tag> 倍增 </tag>
            
            <tag> 倍增优化建图 </tag>
            
            <tag> 并查集 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>牛客练习赛23</title>
      <link href="/2018/07/28/NCTraining25/"/>
      <url>/2018/07/28/NCTraining25/</url>
      <content type="html"><![CDATA[<p>昨晚打了一场比赛……感觉不太难的？（<del>E题除外</del>）</p><p>还事撸一篇题解罢？</p><a id="more"></a><h2 id="a">A</h2><h3 id="description">Description</h3><p>懒得写了……（逃</p><h3 id="solution">Solution</h3><p>贪心且尽量选最大的，然后没了……</p><h3 id="code">Code</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> v1[<span class="number">7</span>] = &#123;<span class="number">100</span>, <span class="number">50</span>, <span class="number">20</span>, <span class="number">10</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> v2[<span class="number">6</span>] = &#123;<span class="number">50</span>, <span class="number">20</span>, <span class="number">10</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">1</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> T; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</span><br><span class="line">  <span class="keyword">while</span>(T --) &#123;</span><br><span class="line">    <span class="keyword">int</span> a, b; <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;a, &amp;b);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">7</span>; i ++) &#123;</span><br><span class="line">      <span class="keyword">int</span> g = a / v1[i];</span><br><span class="line">      <span class="keyword">if</span>(i &gt; <span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">' '</span>);</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"%d"</span>, g);</span><br><span class="line">      a -= v1[i] * g;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i ++) &#123;</span><br><span class="line">      <span class="keyword">int</span> g = b / v2[i];</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">" %d"</span>, g);</span><br><span class="line">      b -= v2[i] * g;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">""</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="b">B</h2><h3 id="description-1">Description</h3><p>还事懒得写……（逃</p><h3 id="solution-1">Solution</h3><p>如果你自己试过的话会发现尽量均分事很合理的……证明啥的画画函数图像就行了（逃</p><h3 id="code-1">Code</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> ll = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>, ll&gt; ma;</span><br><span class="line"><span class="function">ll <span class="title">dp</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(n == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span>(ma.count(n)) <span class="keyword">return</span> ma[n];</span><br><span class="line">  ll x = n / <span class="number">2</span>; ll y = n - x;</span><br><span class="line">  ll ret = x * y + dp(x) + dp(y);</span><br><span class="line">  ma[n] = ret;</span><br><span class="line">  <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> T; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</span><br><span class="line">  <span class="keyword">while</span>(T --) &#123;</span><br><span class="line">    <span class="keyword">int</span> n; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, dp(n));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="c">C</h2><h3 id="description-2">Description</h3><p>给定一自然数序列<span class="math inline">\(a\)</span>，选出一个子序列<span class="math inline">\(b\)</span>使得<span class="math inline">\(b\)</span>中所有元素按位与的<code>lowbit</code>尽可能大。要求你输出这个<span class="math inline">\(b\)</span>。</p><p>此外，如果有多解那么取一个<span class="math inline">\(b\)</span>尽可能长的。</p><p><span class="math inline">\(n\leq 10^5,a_i&lt;2^{31}\)</span>。</p><h3 id="solution-2">Solution</h3><p>我们可以枚举那个<code>lowbit</code>是哪一位，然后我们至少要保证<span class="math inline">\(b\)</span>中每个元素都含有这一位。</p><p>然后我们要求按位与起来更低的位都要是0。然后我们知道参与按位与运算的元素越多，每一位就不可能会变大。那么只要取出所有含有我们要求的那一位元素构成<span class="math inline">\(b\)</span>，还是有更低位元素为1的话，那么我们枚举的这一位就一定不是答案了。</p><p>更好的性质是，这种方法是一定能保证<span class="math inline">\(b\)</span>尽可能长的。</p><h3 id="code-2">Code</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lowbit</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x &amp; (-x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">100005</span>;</span><br><span class="line"><span class="keyword">int</span> a[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> n; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) &#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= <span class="number">30</span>; j ++) &#123;</span><br><span class="line">    <span class="keyword">int</span> sv = INT_MAX;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) &#123;</span><br><span class="line">      <span class="keyword">if</span>((<span class="number">1</span> &lt;&lt; j) &amp; a[i]) sv &amp;= a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(sv != <span class="number">0</span> &amp;&amp; lowbit(sv) &gt;= (<span class="number">1</span> &lt;&lt; j)) &#123;</span><br><span class="line">      ans = <span class="built_in">std</span>::max(ans, (<span class="number">1</span> &lt;&lt; j));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(ans == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"0"</span>); <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vec;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) &#123;</span><br><span class="line">    <span class="keyword">if</span>(a[i] &amp; ans) &#123;</span><br><span class="line">      vec.push_back(a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, vec.size());</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; vec.size(); i ++) &#123;</span><br><span class="line">    <span class="keyword">if</span>(i &gt; <span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">' '</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>, vec[i]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">""</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="d">D</h2><h3 id="description-3">Description</h3><p>给你一个由<span class="math inline">\(a\ldots i\)</span>为组成字符的字符串<span class="math inline">\(S\)</span>（<span class="math inline">\(|S|\leq 3000\)</span>），求有多少<code>abcdefghi</code>的排列使得该排列为<span class="math inline">\(S\)</span>的子序列。</p><h3 id="solution-3">Solution</h3><p>我们考虑枚举排列再判定吧。</p><p>我们直接搞出来<span class="math inline">\(S\)</span>的子序列自动机，然后再扔进去一遍就行了。子序列自动机也不难，你每个点的每种字符的边往他后面第一次这个字符出现的地方连就行。</p><h3 id="code-3">Code</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">3005</span>;</span><br><span class="line"><span class="keyword">int</span> go[maxn][<span class="number">9</span>]; <span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">char</span> S[maxn]; <span class="keyword">int</span> las[<span class="number">9</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">process</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = n; i &gt;= <span class="number">0</span>; i --) &#123;</span><br><span class="line">    <span class="built_in">memcpy</span>(go[i], las, <span class="keyword">sizeof</span>(las));</span><br><span class="line">    <span class="keyword">if</span>(i &gt; <span class="number">0</span>) las[S[i] - <span class="string">'a'</span>] = i;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">char</span> *s)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> l = <span class="built_in">strlen</span>(s);</span><br><span class="line">  <span class="keyword">int</span> u = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; l; i ++) &#123;</span><br><span class="line">    <span class="keyword">int</span> c = s[i] - <span class="string">'a'</span>;</span><br><span class="line">    <span class="keyword">if</span>(!go[u][c]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    u = go[u][c];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> s[<span class="number">10</span>] = <span class="string">"abcdefghi"</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">"%s"</span>, S + <span class="number">1</span>); n = <span class="built_in">strlen</span>(S + <span class="number">1</span>);</span><br><span class="line">  process();</span><br><span class="line">  <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(check(s)) ans ++;</span><br><span class="line">  &#125; <span class="keyword">while</span>(<span class="built_in">std</span>::next_permutation(s, s + <span class="number">9</span>));</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="e">E</h2><h3 id="description-4">Description</h3><p>给定正整数<span class="math inline">\(n, x\)</span>，要你求一个最大的<span class="math inline">\(b\)</span>满足<span class="math inline">\(1&lt;b&lt;x\)</span>，且在<span class="math inline">\(b\)</span>进制下存在一个长为<span class="math inline">\(n\)</span>的正整数<span class="math inline">\(a\)</span>（允许有前导0），满足把<span class="math inline">\(a\)</span>的<span class="math inline">\(b\)</span>进制表示看成一个序列之后，做出来的<span class="math inline">\(n\)</span>种循环位移互不相同，且分别可以由<span class="math inline">\(a\cdot l(1\leq l\leq n)\)</span>得到。</p><p><span class="math inline">\(n\leq 5\cdot 10^6,x\leq 10^9\)</span>。</p><h3 id="solution-4">Solution</h3><p>可以书事最难的题力，，，</p><p>我们考虑那个<span class="math inline">\(a\)</span>吧，就当<span class="math inline">\(b = 10, a = 142857\)</span>来说，构造一个小数<span class="math inline">\(c\)</span>满足： <span class="math display">\[c = 0.\overline{142857}\]</span> 这个东西既然是个小数，那么一定可以表示为一个分数<span class="math inline">\(\frac{p}{q}(p\perp q)\)</span>。然后我们发现如果<span class="math inline">\(a\)</span>合法，那么<span class="math inline">\(a\cdot b^l(0\leq l &lt; n)\)</span>的小数部分组成的集合和<span class="math inline">\(a\cdot l(1\leq l\leq n)\)</span>组成的集合事完全一致的。</p><p>小数部分显然只会由分子模<span class="math inline">\(q\)</span>的结果决定，那么上面的结论就等价于<span class="math inline">\(p\cdot b^l(0\leq l &lt; n)\)</span>组成的集合和<span class="math inline">\(p\cdot l(1\leq l\leq n)\)</span>组成的集合事一致的。而<span class="math inline">\(p^{-1}\bmod{q}\)</span>存在，那么给两个集合都乘上这玩意，那么就得到了<span class="math inline">\(b^l(0\leq l &lt; n)\)</span>和<span class="math inline">\(l(1\leq l\leq n)\)</span>，然后就会发现<span class="math inline">\(b\)</span>的这若干次幂和<span class="math inline">\(Z_{n + 1}\)</span>中的正数一一对应……换言之<span class="math inline">\(b\)</span>为<span class="math inline">\(n + 1\)</span>的原根且<span class="math inline">\(n + 1\)</span>必须为质数。</p><p>找原根的话直接枚举判定就行了……要知道原根很密集的（逃</p><h3 id="code-4">Code</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">10000000</span>;</span><br><span class="line"><span class="keyword">int</span> phi[N + <span class="number">5</span>], minp[N + <span class="number">5</span>];</span><br><span class="line"><span class="keyword">int</span> prm[N + <span class="number">5</span>]; <span class="keyword">bool</span> vis[N + <span class="number">5</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sieve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  phi[<span class="number">1</span>] = <span class="number">1</span>; vis[<span class="number">1</span>] = <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= N; i ++) &#123;</span><br><span class="line">    <span class="keyword">if</span>(!vis[i]) &#123;</span><br><span class="line">      phi[i] = i - <span class="number">1</span>; minp[i] = i;</span><br><span class="line">      prm[cnt ++] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; cnt &amp;&amp; prm[j] &lt;= N / i; j ++) &#123;</span><br><span class="line">      <span class="keyword">int</span> v = i * prm[j];</span><br><span class="line">      <span class="keyword">if</span>(v &gt; N) <span class="keyword">break</span>;</span><br><span class="line">      vis[v] = <span class="literal">true</span>; minp[v] = prm[j];</span><br><span class="line">      <span class="keyword">if</span>(i % prm[j] == <span class="number">0</span>) &#123;</span><br><span class="line">        phi[v] = phi[i] * prm[j]; <span class="keyword">break</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        phi[v] = phi[i] * phi[prm[j]];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> ll = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"><span class="function">ll <span class="title">pow_mod</span><span class="params">(ll a, ll b, ll p)</span> </span>&#123;</span><br><span class="line">  ll ans = <span class="number">1</span>, res = a % p;</span><br><span class="line">  <span class="keyword">while</span>(b) &#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="number">1L</span>L &amp; b) ans = (ans * res) % p;</span><br><span class="line">    res = (res * res) % p; b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">has_phi</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> !vis[x];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; V;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">desc</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">while</span>(x &gt; <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">int</span> p = minp[x];</span><br><span class="line">    V.push_back(p);</span><br><span class="line">    <span class="keyword">while</span>(x % p == <span class="number">0</span>) x /= p;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> t, <span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> v : V) &#123;</span><br><span class="line">    ll ans = pow_mod(x, t / v, p);</span><br><span class="line">    <span class="keyword">if</span>(ans == <span class="number">1L</span>L) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">gcd</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(!b) <span class="keyword">return</span> a;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">return</span> gcd(b, a % b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  sieve();</span><br><span class="line">  <span class="keyword">int</span> n, x; <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;x);</span><br><span class="line">  <span class="keyword">if</span>(x &lt;= <span class="number">2</span> || vis[n + <span class="number">1</span>]) &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"-1"</span>); <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  if(n == 1) &#123;</span></span><br><span class="line"><span class="comment">    printf("%d\n", x - 1); return 0;</span></span><br><span class="line"><span class="comment">  &#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">  <span class="keyword">int</span> p = n + <span class="number">1</span>; <span class="keyword">int</span> t = n;</span><br><span class="line">  desc(t);</span><br><span class="line">  <span class="keyword">bool</span> ok = <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = x - <span class="number">1</span>; i &gt; <span class="number">1</span>; i --) &#123;</span><br><span class="line">    <span class="keyword">if</span>((gcd(i, p) == <span class="number">1</span>) &amp;&amp; check(i, t, p)) &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, i); ok = <span class="literal">true</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(!ok) <span class="built_in">puts</span>(<span class="string">"-1"</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="f">F</h2><h3 id="description-5">Description</h3><p>给一颗<span class="math inline">\(n\)</span>个点的以1为根的树，每次随机选择剩下点中的一个将其子树删掉，等没点了游戏终止。</p><p>求期望删除次数。</p><h3 id="solution-5">Solution</h3><p>怎么感觉是一道经典题……</p><p>根据期望线性性，我们考虑每个点对答案的贡献。</p><p>每个点首先他和他祖先中势必会有一个点被删除，要是祖先被删了那也没它什么戏了。</p><p>所以在它做出贡献时必定他和他祖先都在，然后删了它。无论是在什么情况下，他被删了他祖先却没被动的概率都是<span class="math inline">\(\frac{1}{d}\)</span>（其中<span class="math inline">\(d\)</span>为他和他祖先的数量）。</p><p>然后加起来就好了。</p><h3 id="code-5">Code</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> ll = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"><span class="keyword">const</span> ll ha = <span class="number">998244353L</span>L;</span><br><span class="line"><span class="function">ll <span class="title">pow_mod</span><span class="params">(ll a, ll b)</span> </span>&#123;</span><br><span class="line">  ll ans = <span class="number">1</span>, res = a;</span><br><span class="line">  <span class="keyword">while</span>(b) &#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="number">1L</span>L &amp; b) ans = (ans * res) % ha;</span><br><span class="line">    res = (res * res) % ha; b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">inv</span><span class="params">(ll x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> pow_mod(x, ha - <span class="number">2L</span>L);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G[<span class="number">100005</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ins_edge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">  G[u].push_back(v);</span><br><span class="line">  G[v].push_back(u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> fa, <span class="keyword">int</span> depth)</span> </span>&#123;</span><br><span class="line">  ll ret = inv(depth);</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">auto</span> v : G[x]) &#123;</span><br><span class="line">    <span class="keyword">if</span>(v != fa) &#123;</span><br><span class="line">      ret = (ret + dfs(v, x, depth + <span class="number">1</span>)) % ha;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> n; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n - <span class="number">1</span>; i ++) &#123;</span><br><span class="line">    <span class="keyword">int</span> u, v; <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;u, &amp;v);</span><br><span class="line">    ins_edge(u, v);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, dfs(<span class="number">1</span>, <span class="number">-1</span>, <span class="number">1</span>));</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 题解 </category>
          
          <category> 比赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原根 </tag>
            
            <tag> NowCoder </tag>
            
            <tag> 贪心 </tag>
            
            <tag> 子序列自动机 </tag>
            
            <tag> 位运算 </tag>
            
            <tag> 概率与期望 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>后缀XXX可持久化大坑</title>
      <link href="/2018/07/25/suffix/"/>
      <url>/2018/07/25/suffix/</url>
      <content type="html"><![CDATA[<p>我谔谔，我今天才学的后缀数组（<del>之前只会后缀自动机</del>）。</p><p>然后就想开个后缀家族大坑？</p><a id="more"></a><h1 id="后缀数组">后缀数组</h1><h2 id="介绍">介绍</h2><p>虽然说可能在各位巨佬眼里这已经是烂大街的东西了……但我现在才会（逃</p><p>思想很简单吧，对于原串的所有后缀排个序（按字典序升序），形成了一个数组<span class="math inline">\(\mathrm{sa}\)</span>，就叫做后缀数组，方便起见定义<span class="math inline">\(\mathrm{rk}[i]\)</span>表示<span class="math inline">\(i\ldots n\)</span>这一段后缀在<span class="math inline">\(\mathrm{sa}\)</span>中的排名。</p><p>然后考虑怎么求这玩意吧……</p><h3 id="倍增排序求sa">倍增排序求SA</h3><p>如果直接按照定义，快排加暴力比较弄的话，<span class="math inline">\(O(n^2\log n)\)</span>的复杂度没什么用（<del>其实有个比较贱的方法事你可以预处理哈希然后二分比较两个后缀就匪快了</del>）。</p><p>我们考虑采取倍增的思想，依次比较各个后缀的长度为<span class="math inline">\(1,2,4,8,16,\ldots\)</span>的前缀，这样的话总是可以比较出最后的结果。</p><p>更大的好处是，假如我们已经有了<span class="math inline">\(2^t\)</span>下的答案，我们要对<span class="math inline">\(2^{t + 1}\)</span>的情况排序。那么每个后缀我们可以直接视为一个二元组<span class="math inline">\((a, b)\)</span>，其中<span class="math inline">\(a,b\)</span>分别是<span class="math inline">\(2^t\)</span>下的排名。</p><p>这样的话我们可以直接用这种思想套上快排，复杂度<span class="math inline">\(O(n\log^2 n)\)</span>。但观察到二元组的两元的值域都不超过<span class="math inline">\(n\)</span>，所以把快排改成桶排，这样复杂度就是<span class="math inline">\(O(n\log n)\)</span>的了。</p><p><del>然后更多细节参考代码吧。</del></p><h3 id="sa的应用height数组">SA的应用：height数组</h3><p>这样看的话SA好像没啥用处？</p><p>我们定义一个<span class="math inline">\(\mathrm{height}[i]\)</span>表示排名为<span class="math inline">\(i\)</span>的后缀和他的上一名的LCP。如果你学过后缀树的话，你会发现把后缀树的叶子按照对应后缀字典序排序一下，然后这个<span class="math inline">\(\mathrm{height}\)</span>就是每个叶子和他左侧的叶子的LCA的深度。</p><p>直接按照定义求这玩意显然复杂度<span class="math inline">\(O(n^2)\)</span>，难以接受。然后我们定义<span class="math inline">\(h(i) = \mathrm{height}[\mathrm{rk}[i]]\)</span>，然后我们发现有： <span class="math display">\[h(i)\geq h(i - 1) - 1\]</span> 证明的话考虑<span class="math inline">\(h(i - 1)\geq 1\)</span>的情况就行了。我们假设<span class="math inline">\(a = i - 1, b = \mathrm{sa}[\mathrm{rk}[a] - 1]\)</span>，那么若<span class="math inline">\(h(i - 1)\geq 1\)</span>，那么我们把两者截去开头一个字符还会得到两个新的后缀<span class="math inline">\(a&#39;,b&#39;\)</span>，注意到有<span class="math inline">\(a&#39; = i, b&#39; = b + 1\)</span>，且<span class="math inline">\(\mathbf{LCP}(a&#39;,b&#39;) = h(i - 1) - 1\)</span>，考虑到字典序意义上<span class="math inline">\(a &gt; b\)</span>，那么显然字典序意义下也有<span class="math inline">\(i &gt; b + 1\)</span>，那么说明<span class="math inline">\(\mathrm{rk}[i] - 1\leq b + 1\)</span>，因此<span class="math inline">\(\mathrm{sa}[\mathrm{rk}[i] - 1]\)</span>在排序后的后缀树中一定不会比<span class="math inline">\(b + 1\)</span>离<span class="math inline">\(i\)</span>更远，换言之<span class="math inline">\(\mathrm{sa}[\mathrm{rk}[i] - 1]\)</span>和<span class="math inline">\(i\)</span>在树中的LCA深度（也就是串中的LCP大小）不会小于<span class="math inline">\(h(i - 1) - 1\)</span>。</p><p>根据这个东西，就可以很轻松的<span class="math inline">\(O(n)\)</span>求出<span class="math inline">\(\mathrm{height}\)</span>数组了。</p><h2 id="题目">题目</h2><h3 id="poj-2774-long-long-message">POJ 2774 Long Long Message</h3><h4 id="description">Description</h4><p>给两个串，求两者的最长公共子串。</p><p>两个串的长度都不超过100000。</p><h4 id="solution">Solution</h4><p>考虑把两个串强行接在一起（顺便中间加上一个特殊字符作为分隔符以防越界），那么两者的公共子串一定是某两个在分隔符两端的后缀的公共前缀，而我们要取出最长的情况。</p><p>那么我们按照<span class="math inline">\(\mathrm{sa}\)</span>的顺序扫描所有后缀，如果出现相邻两个后缀在分隔符两侧，那就取他们的<span class="math inline">\(\mathrm{height}\)</span>值更新答案即可。</p><h4 id="code">Code</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">idx</span><span class="params">(<span class="keyword">char</span> c)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(c == <span class="string">'$'</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">27</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> c - <span class="string">'a'</span> + <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">200005</span>;</span><br><span class="line"><span class="keyword">char</span> S[maxn]; <span class="keyword">int</span> sz;</span><br><span class="line"><span class="keyword">int</span> sa[maxn], rk[maxn], height[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">process</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">int</span> fir[maxn], sec[maxn];</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">int</span> buf[maxn], tmp[maxn];</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= sz; i ++) buf[idx(S[i])] ++;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">27</span>; i ++) buf[i] += buf[i - <span class="number">1</span>];</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= sz; i ++) rk[i] = buf[idx(S[i]) - <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> t = <span class="number">1</span>; t &lt;= sz; t &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= sz; i ++) &#123;</span><br><span class="line">      fir[i] = rk[i];</span><br><span class="line">      sec[i] = (i + t &gt; sz) ? <span class="number">0</span> : rk[i + t];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">std</span>::fill(buf, buf + sz + <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= sz; i ++) buf[sec[i]] ++;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= sz; i ++) buf[i] += buf[i - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= sz; i ++) tmp[buf[sec[i]] --] = i;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::fill(buf, buf + sz + <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= sz; i ++) buf[fir[i]] ++;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= sz; i ++) buf[i] += buf[i - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = sz; i &gt;= <span class="number">1</span>; i --) &#123;</span><br><span class="line">      <span class="keyword">int</span> j = tmp[i];</span><br><span class="line">      sa[buf[fir[j]] --] = j;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">bool</span> unique = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>, las = <span class="number">0</span>; i &lt;= sz; i ++) &#123;</span><br><span class="line">      <span class="keyword">int</span> j = sa[i];</span><br><span class="line">      <span class="keyword">if</span>(!las) &#123;</span><br><span class="line">        rk[j] = <span class="number">1</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(fir[j] == fir[las] &amp;&amp; sec[j] == sec[las]) &#123;</span><br><span class="line">          unique = <span class="literal">false</span>;</span><br><span class="line">          rk[j] = rk[las];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          rk[j] = rk[las] + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      las = j;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(unique) <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>, k = <span class="number">0</span>; i &lt;= sz; i ++) &#123;</span><br><span class="line">    <span class="keyword">if</span>(rk[i] == <span class="number">1</span>) &#123;</span><br><span class="line">      k = <span class="number">0</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">if</span>(k &gt; <span class="number">0</span>) k --;</span><br><span class="line">      <span class="keyword">int</span> j = sa[rk[i] - <span class="number">1</span>];</span><br><span class="line">      <span class="keyword">while</span>(i + k &lt;= sz &amp;&amp; j + k &lt;= sz &amp;&amp; S[i + k] == S[j + k]) k ++;</span><br><span class="line">    &#125;</span><br><span class="line">    height[rk[i]] = k;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> s1, s2;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  process();</span><br><span class="line">  <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= sz; i ++) &#123;</span><br><span class="line">    <span class="keyword">int</span> a = sa[i], b = sa[i - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">bool</span> v1 = a &lt;= s1, v2 = b &lt;= s1;</span><br><span class="line">    <span class="keyword">if</span>(v1 ^ v2) &#123;</span><br><span class="line">      ans = <span class="built_in">std</span>::max(ans, height[i]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">"%s"</span>, S + <span class="number">1</span>);</span><br><span class="line">  s1 = <span class="built_in">strlen</span>(S + <span class="number">1</span>);</span><br><span class="line">  S[s1 + <span class="number">1</span>] = <span class="string">'$'</span>;</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">"%s"</span>, S + s1 + <span class="number">2</span>);</span><br><span class="line">  sz = <span class="built_in">strlen</span>(S + <span class="number">1</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, solve());</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="poj-1743-musical-theme">POJ 1743 Musical Theme</h3><h4 id="description-1">Description</h4><p>给一个由<span class="math inline">\([1, 88]\)</span>中整数组成的数字串，要求取出两个长度相等的不重叠子串。要求：</p><ul><li>两个串的长度都大于5。</li><li>一个子串可以通过整体加上一个整数得到另一个子串。</li></ul><p>最大化取出子串的长度。</p><p>多组数据，串长不超过20000。</p><h4 id="solution-1">Solution</h4><p>算事经典套路题了……<del>一直知道但一直没做</del></p><p>首先第二个条件很鬼畜，我们考虑做一些转化搞掉它。我们直接把序列差分，这样的话除了第一项其他都能匹配（要考虑一下整个序列的第一项怎么处理啊<del>，这个参考代码吧</del>）。</p><p>先讲个比较逊的做法……很显然这个东西的答案具有单调性，那么考虑二分答案。</p><p>然后考虑该怎么判定答案。考虑当前二分答案为<span class="math inline">\(k\)</span>，然后我们对于所有<span class="math inline">\(\mathrm{height}[i]\geq k\)</span>，我们都可以合并<span class="math inline">\(\mathrm{sa}[i - 1]\)</span>和<span class="math inline">\(\mathrm{sa}[i]\)</span>（也就是说可能可以由这两个后缀产生答案，并且这种关系很显然具有传递性），那么就相当于除了<span class="math inline">\(\mathrm{height}[i] &lt; k\)</span>的情况被“断开”了，其他地方都已经分别连在一块了。那么每一块都是可能在块内产生答案（但不可能和块外产生答案），如果说某个块中最长后缀和最短后缀的差不小于<span class="math inline">\(k\)</span>，那么说明该块可以取出两个不重叠的长度不小于<span class="math inline">\(k\)</span>的后缀的前缀，因此<span class="math inline">\(k\)</span>合法。反之<span class="math inline">\(k\)</span>不合法。</p><p>这样复杂度很显然事<span class="math inline">\(O(n\log n)\)</span>的，可以通过此题。</p><p>然后我们考虑那个二分答案其实不需要的……我们可以用并查集来维护块。我们每个块都维护块中最长后缀和最短后缀，刚开始每个点都是自己一块。从大到小枚举所有<span class="math inline">\(\mathrm{height}[i]\)</span>的值，然后去合并块。每次合并出新的块的时候我们判一下是否有合法答案就行了。</p><h4 id="code-1">Code</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">200005</span>;</span><br><span class="line"><span class="keyword">int</span> S[maxn]; <span class="keyword">int</span> sz;</span><br><span class="line"><span class="keyword">int</span> sa[maxn], rk[maxn], height[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">process</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">int</span> fir[maxn], sec[maxn];</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">int</span> buf[maxn], tmp[maxn];</span><br><span class="line">  <span class="built_in">std</span>::fill(buf, buf + <span class="number">1</span> + sz, <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= sz; i ++) buf[S[i]] ++;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= sz; i ++) buf[i] += buf[i - <span class="number">1</span>];</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= sz; i ++) rk[i] = buf[S[i] - <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> t = <span class="number">1</span>; t &lt;= sz; t &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= sz; i ++) &#123;</span><br><span class="line">      fir[i] = rk[i];</span><br><span class="line">      sec[i] = (i + t &gt; sz) ? <span class="number">0</span> : rk[i + t];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">std</span>::fill(buf, buf + sz + <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= sz; i ++) buf[sec[i]] ++;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= sz; i ++) buf[i] += buf[i - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= sz; i ++) tmp[buf[sec[i]] --] = i;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::fill(buf, buf + sz + <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= sz; i ++) buf[fir[i]] ++;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= sz; i ++) buf[i] += buf[i - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = sz; i &gt;= <span class="number">1</span>; i --) &#123;</span><br><span class="line">      <span class="keyword">int</span> j = tmp[i];</span><br><span class="line">      sa[buf[fir[j]] --] = j;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">bool</span> unique = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>, las = <span class="number">0</span>; i &lt;= sz; i ++) &#123;</span><br><span class="line">      <span class="keyword">int</span> j = sa[i];</span><br><span class="line">      <span class="keyword">if</span>(!las) &#123;</span><br><span class="line">        rk[j] = <span class="number">1</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(fir[j] == fir[las] &amp;&amp; sec[j] == sec[las]) &#123;</span><br><span class="line">          unique = <span class="literal">false</span>;</span><br><span class="line">          rk[j] = rk[las];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          rk[j] = rk[las] + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      las = j;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(unique) <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>, k = <span class="number">0</span>; i &lt;= sz; i ++) &#123;</span><br><span class="line">    <span class="keyword">if</span>(rk[i] == <span class="number">1</span>) &#123;</span><br><span class="line">      k = <span class="number">0</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">if</span>(k &gt; <span class="number">0</span>) k --;</span><br><span class="line">      <span class="keyword">int</span> j = sa[rk[i] - <span class="number">1</span>];</span><br><span class="line">      <span class="keyword">while</span>(i + k &lt;= sz &amp;&amp; j + k &lt;= sz &amp;&amp; S[i + k] == S[j + k]) k ++;</span><br><span class="line">    &#125;</span><br><span class="line">    height[rk[i]] = k;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> p[maxn], pd[maxn];</span><br><span class="line"><span class="keyword">int</span> minv[maxn], maxv[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init_set</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= sz; i ++) &#123;</span><br><span class="line">    p[i] = i;</span><br><span class="line">    minv[i] = maxv[i] = sa[i];</span><br><span class="line">    pd[i] = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_fa</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(p[x] == x) &#123;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (p[x] = get_fa(p[x]));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">link_set</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(pd[x] &gt; pd[y]) <span class="built_in">std</span>::swap(x, y);</span><br><span class="line">  p[x] = y;</span><br><span class="line">  minv[y] = <span class="built_in">std</span>::min(minv[y], minv[x]);</span><br><span class="line">  maxv[y] = <span class="built_in">std</span>::max(maxv[y], maxv[x]);</span><br><span class="line">  <span class="keyword">if</span>(pd[x] == pd[y]) pd[y] ++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge_set</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">  x = get_fa(x), y = get_fa(y);</span><br><span class="line">  <span class="keyword">if</span>(x != y) link_set(x, y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; V[maxn];</span><br><span class="line">  process(); init_set();</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= sz; i ++) V[i].clear();</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= sz; i ++) &#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"height[%d] : %d\n"</span>, i, height[i]);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    V[height[i]].push_back(i);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = sz; i &gt;= <span class="number">1</span>; i --) &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; V[i].size(); j ++) &#123;</span><br><span class="line">      <span class="keyword">int</span> u = V[i][j];</span><br><span class="line">      merge_set(u - <span class="number">1</span>, u);</span><br><span class="line">      u = get_fa(u);</span><br><span class="line">      <span class="keyword">if</span>(maxv[u] - minv[u] &gt;= i) <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">int</span> S2[maxn];</span><br><span class="line">  S[<span class="number">0</span>] = <span class="number">50000</span>;</span><br><span class="line">  <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;sz) == <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(!sz) <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= sz; i ++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;S[i]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = sz; i &gt;= <span class="number">1</span>; i --) S[i] -= S[i - <span class="number">1</span>];</span><br><span class="line">    <span class="built_in">std</span>::copy(S + <span class="number">1</span>, S + <span class="number">1</span> + sz, S2 + <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">std</span>::sort(S2 + <span class="number">1</span>, S2 + <span class="number">1</span> + sz);</span><br><span class="line">    <span class="keyword">int</span> lsiz = <span class="built_in">std</span>::unique(S2 + <span class="number">1</span>, S2 + <span class="number">1</span> + sz) - S2 - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= sz; i ++) &#123;</span><br><span class="line">      S[i] = <span class="built_in">std</span>::lower_bound(S2 + <span class="number">1</span>, S2 + <span class="number">1</span> + lsiz, S[i]) - S2;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> ret = solve() + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(ret &gt;= <span class="number">5</span>) &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ret);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">"0"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="poj-3415-common-substrings">POJ 3415 Common Substrings</h3><h4 id="description-2">Description</h4><p>给出两个串<span class="math inline">\(A,B\)</span>和一个一个正整数<span class="math inline">\(k\)</span>，求出两个串长度不小于<span class="math inline">\(k\)</span>的公共子串的数量。</p><p><span class="math inline">\(1\leq |A|,|B|\leq 10^5,1\leq k\leq\min(|A|,|B|)\)</span>，多组数据。两个串最多由<strong>全体拉丁字母</strong>组成。</p><h4 id="solution-2">Solution</h4><p>首先还是考虑把<span class="math inline">\(\mathrm{height}[i] &lt; k\)</span>的地方断开，剩下的地方连成块，然后剩下的每一块内部产生答案。</p><p>然后答案有两类，一类是在<span class="math inline">\(A\)</span>中的后缀和排名比他小的<span class="math inline">\(B\)</span>中的后缀产生答案，另一类情况是反过来的。那么会做第一类就会做第二类了。</p><p>考虑一个排名比<span class="math inline">\(i\)</span>低的串，对<span class="math inline">\(i\)</span>造成的贡献事两者的LCP再减<span class="math inline">\(k - 1\)</span>，那么我们考虑怎么去维护所有串的贡献的和。我们注意到排名比<span class="math inline">\(\mathrm{sa}[i]\)</span>越低，和<span class="math inline">\(\mathrm{sa}[i]\)</span>的LCP就会越来越小，从左往右事单调递增的。所以我们可以用单调栈来维护这个东西。</p><h4 id="code-2">Code</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">idx</span><span class="params">(<span class="keyword">char</span> c)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(c == <span class="string">'$'</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">53</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span>(c &gt;= <span class="string">'a'</span> &amp;&amp; c &lt;= <span class="string">'z'</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> c - <span class="string">'a'</span> + <span class="number">1</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> c - <span class="string">'A'</span> + <span class="number">27</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">200005</span>;</span><br><span class="line"><span class="keyword">char</span> S[maxn]; <span class="keyword">int</span> sz;</span><br><span class="line"><span class="keyword">int</span> sa[maxn], rk[maxn], height[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">process</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">int</span> fir[maxn], sec[maxn];</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">int</span> buf[maxn], tmp[maxn];</span><br><span class="line">  <span class="built_in">std</span>::fill(buf, buf + <span class="built_in">std</span>::max(sz, <span class="number">53</span>) + <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= sz; i ++) buf[idx(S[i])] ++;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">53</span>; i ++) buf[i] += buf[i - <span class="number">1</span>];</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= sz; i ++) rk[i] = buf[idx(S[i]) - <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> t = <span class="number">1</span>; t &lt;= sz; t &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= sz; i ++) &#123;</span><br><span class="line">      fir[i] = rk[i];</span><br><span class="line">      sec[i] = (i + t &gt; sz) ? <span class="number">0</span> : rk[i + t];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">std</span>::fill(buf, buf + sz + <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= sz; i ++) buf[sec[i]] ++;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= sz; i ++) buf[i] += buf[i - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= sz; i ++) tmp[buf[sec[i]] --] = i;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::fill(buf, buf + sz + <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= sz; i ++) buf[fir[i]] ++;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= sz; i ++) buf[i] += buf[i - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = sz; i &gt;= <span class="number">1</span>; i --) &#123;</span><br><span class="line">      <span class="keyword">int</span> j = tmp[i];</span><br><span class="line">      sa[buf[fir[j]] --] = j;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">bool</span> unique = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>, las = <span class="number">0</span>; i &lt;= sz; i ++) &#123;</span><br><span class="line">      <span class="keyword">int</span> j = sa[i];</span><br><span class="line">      <span class="keyword">if</span>(!las) &#123;</span><br><span class="line">        rk[j] = <span class="number">1</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(fir[j] == fir[las] &amp;&amp; sec[j] == sec[las]) &#123;</span><br><span class="line">          unique = <span class="literal">false</span>;</span><br><span class="line">          rk[j] = rk[las];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          rk[j] = rk[las] + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      las = j;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(unique) <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>, k = <span class="number">0</span>; i &lt;= sz; i ++) &#123;</span><br><span class="line">    <span class="keyword">if</span>(rk[i] == <span class="number">1</span>) &#123;</span><br><span class="line">      k = <span class="number">0</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">if</span>(k &gt; <span class="number">0</span>) k --;</span><br><span class="line">      <span class="keyword">int</span> j = sa[rk[i] - <span class="number">1</span>];</span><br><span class="line">      <span class="keyword">while</span>(i + k &lt;= sz &amp;&amp; j + k &lt;= sz &amp;&amp; S[i + k] == S[j + k]) k ++;</span><br><span class="line">    &#125;</span><br><span class="line">    height[rk[i]] = k;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> s1, s2;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (i &lt;= s1);</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line">  <span class="keyword">int</span> cnt, val;</span><br><span class="line">  Node(<span class="keyword">int</span> v, <span class="keyword">int</span> c = <span class="number">1</span>) &#123;</span><br><span class="line">    val = v; cnt = c;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">bool</span> <span class="keyword">operator</span> &lt;(<span class="keyword">const</span> Node &amp;res) <span class="keyword">const</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> val &lt; res.val;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">bool</span> <span class="keyword">operator</span> ==(<span class="keyword">const</span> Node &amp;res) <span class="keyword">const</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> val == res.val;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">bool</span> <span class="keyword">operator</span> &gt;(<span class="keyword">const</span> Node &amp;res) <span class="keyword">const</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> val &gt; res.val;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">int</span> k;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">DStack</span> &#123;</span></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">stack</span>&lt;Node&gt; S;</span><br><span class="line">  ll ans;</span><br><span class="line">  DStack() &#123; ans = <span class="number">0</span>; &#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(!S.empty()) S.pop();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(Node x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(!S.empty() &amp;&amp; (S.top() &gt; x || S.top() == x)) &#123;</span><br><span class="line">      ll v = S.top().val, c = S.top().cnt; S.pop();</span><br><span class="line">      ans -= v * c; x.cnt += c;</span><br><span class="line">    &#125;</span><br><span class="line">    S.push(x); ans += (ll(x.cnt)) * (ll(x.val));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">solve</span><span class="params">(<span class="keyword">bool</span> bs)</span> </span>&#123;</span><br><span class="line">  DStack S;</span><br><span class="line">  ll ans = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= sz; i ++) &#123;</span><br><span class="line">    <span class="keyword">if</span>(height[i] &lt; k) &#123;</span><br><span class="line">      S.clear(); <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">bool</span> th = check(sa[i]);</span><br><span class="line">    S.insert(Node(height[i] - k + <span class="number">1</span>, (check(sa[i - <span class="number">1</span>]) != bs) ? <span class="number">1</span> : <span class="number">0</span>));</span><br><span class="line">    <span class="keyword">if</span>(th == bs) ans += S.ans;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;k) == <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(!k) <span class="keyword">break</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>, S + <span class="number">1</span>);</span><br><span class="line">    s1 = <span class="built_in">strlen</span>(S + <span class="number">1</span>);</span><br><span class="line">    S[s1 + <span class="number">1</span>] = <span class="string">'$'</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>, S + <span class="number">2</span> + s1);</span><br><span class="line">    sz = <span class="built_in">strlen</span>(S + <span class="number">1</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"s1 : %d\nsz : %d\n"</span>, s1, sz);</span><br><span class="line">    <span class="built_in">puts</span>(S + <span class="number">1</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    process();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, solve(<span class="literal">false</span>) + solve(<span class="literal">true</span>));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="libreoj-2059-tjoi-heoi2016字符串">LibreOJ 2059 「TJOI / HEOI2016」字符串</h3><h4 id="description-3">Description</h4><p>给出一个长度为<span class="math inline">\(n\)</span>的小写字母串<span class="math inline">\(S\)</span>，<span class="math inline">\(m\)</span>询问<span class="math inline">\(a, b, c, d\)</span>，求出<span class="math inline">\(S[a\ldots b]\)</span>的所有子串和<span class="math inline">\(S[c\ldots d]\)</span>本身的LCP的最大值。</p><p><span class="math inline">\(1\leq n, m\leq 10^5, 1\leq a\leq b\leq n, 1\leq c\leq d\leq n\)</span>。</p><h4 id="solution-3">Solution</h4><p>很显然这个东西的答案满足单调性……所以我们就二分答案吧。</p><p>那么考虑怎么判定呢。 假设当前二分出来的答案为<span class="math inline">\(k\)</span>，那么和后缀<span class="math inline">\(c\ldots n\)</span>的LCP为<span class="math inline">\(k\)</span>的后缀在后缀数组中一定为一段区间（假设为<span class="math inline">\([l, r]\)</span>），那么如果这段区间里有个<span class="math inline">\(i\)</span>满足<span class="math inline">\(\mathrm{sa}[i]\in[a, b - k + 1]\)</span>，那么显然答案合法，反之则不合法。</p><p>于是我们队后缀数组建主席树，然后每次判定就是确定<span class="math inline">\([l, r]\)</span>（这个也可以二分答案搞）之后在一段区间里查询是否有值在一段区间里的位置就行了。</p><h4 id="code-3">Code</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">idx</span><span class="params">(<span class="keyword">char</span> c)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(c == <span class="string">'$'</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">27</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> c - <span class="string">'a'</span> + <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">100005</span>;</span><br><span class="line"><span class="keyword">char</span> S[maxn]; <span class="keyword">int</span> sz;</span><br><span class="line"><span class="keyword">int</span> sa[maxn], rk[maxn], height[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">process</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">int</span> fir[maxn], sec[maxn];</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">int</span> buf[maxn], tmp[maxn];</span><br><span class="line">  <span class="built_in">std</span>::fill(buf, buf + <span class="number">28</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= sz; i ++) buf[idx(S[i])] ++;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">27</span>; i ++) buf[i] += buf[i - <span class="number">1</span>];</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= sz; i ++) rk[i] = buf[idx(S[i]) - <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> t = <span class="number">1</span>; t &lt;= sz; t &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= sz; i ++) &#123;</span><br><span class="line">      fir[i] = rk[i];</span><br><span class="line">      sec[i] = (i + t &gt; sz) ? <span class="number">0</span> : rk[i + t];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">std</span>::fill(buf, buf + sz + <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= sz; i ++) buf[sec[i]] ++;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= sz; i ++) buf[i] += buf[i - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= sz; i ++) tmp[buf[sec[i]] --] = i;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::fill(buf, buf + sz + <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= sz; i ++) buf[fir[i]] ++;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= sz; i ++) buf[i] += buf[i - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = sz; i &gt;= <span class="number">1</span>; i --) &#123;</span><br><span class="line">      <span class="keyword">int</span> j = tmp[i];</span><br><span class="line">      sa[buf[fir[j]] --] = j;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">bool</span> unique = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>, las = <span class="number">0</span>; i &lt;= sz; i ++) &#123;</span><br><span class="line">      <span class="keyword">int</span> j = sa[i];</span><br><span class="line">      <span class="keyword">if</span>(!las) &#123;</span><br><span class="line">        rk[j] = <span class="number">1</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(fir[j] == fir[las] &amp;&amp; sec[j] == sec[las]) &#123;</span><br><span class="line">          unique = <span class="literal">false</span>;</span><br><span class="line">          rk[j] = rk[las];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          rk[j] = rk[las] + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      las = j;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(unique) <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>, k = <span class="number">0</span>; i &lt;= sz; i ++) &#123;</span><br><span class="line">    <span class="keyword">if</span>(rk[i] == <span class="number">1</span>) &#123;</span><br><span class="line">      k = <span class="number">0</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">if</span>(k &gt; <span class="number">0</span>) k --;</span><br><span class="line">      <span class="keyword">int</span> j = sa[rk[i] - <span class="number">1</span>];</span><br><span class="line">      <span class="keyword">while</span>(i + k &lt;= sz &amp;&amp; j + k &lt;= sz &amp;&amp; S[i + k] == S[j + k]) k ++;</span><br><span class="line">    &#125;</span><br><span class="line">    height[rk[i]] = k;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> minv[maxn][<span class="number">18</span>], lim[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">process_st</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= sz; i ++) &#123;</span><br><span class="line">    minv[i][<span class="number">0</span>] = height[i];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; (<span class="number">1</span> &lt;&lt; j) &lt;= sz; j ++) &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; (i + (<span class="number">1</span> &lt;&lt; j) - <span class="number">1</span>) &lt;= sz; i ++) &#123;</span><br><span class="line">      minv[i][j] = <span class="built_in">std</span>::min(minv[i][j - <span class="number">1</span>], minv[i + (<span class="number">1</span> &lt;&lt; (j - <span class="number">1</span>))][j - <span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= sz; i ++) &#123;</span><br><span class="line">    <span class="keyword">int</span> v = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>((<span class="number">1</span> &lt;&lt; (v + <span class="number">1</span>)) &lt;= i) v ++;</span><br><span class="line">    lim[i] = v;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(l &gt; r) <span class="keyword">return</span> <span class="number">0x7fffffff</span>;</span><br><span class="line">  <span class="keyword">int</span> c = lim[r - l + <span class="number">1</span>];</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">std</span>::min(minv[l][c], minv[r - (<span class="number">1</span> &lt;&lt; c) + <span class="number">1</span>][c]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> bufsiz = <span class="number">100</span> * <span class="number">1024</span> * <span class="number">1024</span>;</span><br><span class="line"><span class="keyword">char</span> buf[bufsiz]; <span class="keyword">char</span> *cur = buf;</span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">alloc</span><span class="params">(<span class="keyword">size_t</span> size)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(buf - cur + size &gt; bufsiz) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">malloc</span>(size);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">char</span> *ret = cur; cur += size;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line">  Node *lc, *rc;</span><br><span class="line">  <span class="keyword">int</span> sumv;</span><br><span class="line">&#125;;</span><br><span class="line">Node *nil;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init_pool</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  nil = (Node*)alloc(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">  nil -&gt; sumv = <span class="number">0</span>;</span><br><span class="line">  nil -&gt; lc = nil -&gt; rc = nil;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Node *<span class="title">alloc_node</span><span class="params">(<span class="keyword">int</span> v = <span class="number">0</span>, Node *lc = nil, Node *rc = nil)</span> </span>&#123;</span><br><span class="line">  Node *ret = (Node*)alloc(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">  ret -&gt; sumv = v;</span><br><span class="line">  ret -&gt; lc = lc; ret -&gt; rc = rc;</span><br><span class="line">  <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Node *<span class="title">modify</span><span class="params">(Node *o, <span class="keyword">int</span> L, <span class="keyword">int</span> R, <span class="keyword">int</span> p, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">  Node *ret = alloc_node(o -&gt; sumv + v, o -&gt; lc, o -&gt; rc);</span><br><span class="line">  <span class="keyword">if</span>(L &lt; R) &#123;</span><br><span class="line">    <span class="keyword">int</span> M = (L + R) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(p &lt;= M) &#123;</span><br><span class="line">      ret -&gt; lc = modify(ret -&gt; lc, L, M, p, v);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      ret -&gt; rc = modify(ret -&gt; rc, M + <span class="number">1</span>, R, p, v);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(Node *o, <span class="keyword">int</span> L, <span class="keyword">int</span> R, <span class="keyword">int</span> ql, <span class="keyword">int</span> qr)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(ql &lt;= L &amp;&amp; R &lt;= qr) &#123;</span><br><span class="line">    <span class="keyword">return</span> o -&gt; sumv;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> M = (L + R) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(ql &lt;= M) ans += query(o -&gt; lc, L, M, ql, qr);</span><br><span class="line">    <span class="keyword">if</span>(qr &gt; M) ans += query(o -&gt; rc, M + <span class="number">1</span>, R, ql, qr);</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">Node *T[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> lt, <span class="keyword">int</span> rt, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> query(T[rt], <span class="number">1</span>, sz, l, r) - query(T[lt - <span class="number">1</span>], <span class="number">1</span>, sz, l, r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">process_tree</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  init_pool();</span><br><span class="line">  T[<span class="number">0</span>] = nil;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= sz; i ++) &#123;</span><br><span class="line">    T[i] = modify(T[i - <span class="number">1</span>], <span class="number">1</span>, sz, sa[i], <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"Processing tree ended!"</span>); fflush(<span class="built_in">stdout</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> c, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> L, R, lp = c, rp = c;</span><br><span class="line">  L = <span class="number">1</span>, R = c - <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(R - L &lt;= <span class="number">3</span>) &#123;</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> i = L; i &lt;= R; i ++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(query(i + <span class="number">1</span>, c) &gt;= x) &#123;</span><br><span class="line">          lp = i; <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> M = (L + R) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(query(M + <span class="number">1</span>, c) &gt;= x) &#123;</span><br><span class="line">      R = M;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      L = M;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  L = c + <span class="number">1</span>, R = sz;</span><br><span class="line">  <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"CState (%d, %d)\n"</span>, L, R); fflush(<span class="built_in">stdout</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">if</span>(R - L &lt;= <span class="number">3</span>) &#123;</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> i = R; i &gt;= L; i --) &#123;</span><br><span class="line">        <span class="keyword">if</span>(query(c + <span class="number">1</span>, i) &gt;= x) &#123;</span><br><span class="line">          rp = i; <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> M = (L + R) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(query(c + <span class="number">1</span>, M) &gt;= x) &#123;</span><br><span class="line">      L = M;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">      R = M;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"%d : [%d, %d]\n"</span>, c, lp, rp); fflush(<span class="built_in">stdout</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">  <span class="keyword">return</span> (query(lp, rp, l, r) &gt; <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> c, <span class="keyword">int</span> d)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> L = <span class="number">1</span>, R = <span class="built_in">std</span>::min(d - c + <span class="number">1</span>, b - a + <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"State (%d, %d)\n"</span>, L, R); fflush(<span class="built_in">stdout</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">if</span>(R - L &lt;= <span class="number">3</span>) &#123;</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> i = R; i &gt;= L; i --) &#123;</span><br><span class="line">        <span class="keyword">if</span>(check(i, rk[c], a, b - i + <span class="number">1</span>)) &#123;</span><br><span class="line">          ret = i; <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> M = (L + R) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(check(M, rk[c], a, b - M + <span class="number">1</span>)) &#123;</span><br><span class="line">      L = M;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      R = M;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> q; <span class="built_in">scanf</span>(<span class="string">"%d%d%s"</span>, &amp;sz, &amp;q, S + <span class="number">1</span>);</span><br><span class="line">  process(); process_st(); process_tree();</span><br><span class="line">  <span class="keyword">while</span>(q --) &#123;</span><br><span class="line">    <span class="keyword">int</span> a, b, c, d; <span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>, &amp;a, &amp;b, &amp;c, &amp;d);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, solve(a, b, c, d));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="后缀自动机">后缀自动机</h1><h2 id="介绍-1">介绍</h2><p>还在路上，马上就来了（鸽并感）</p><h2 id="题目-1">题目</h2><h3 id="例题1">例题1</h3><h4 id="description-4">Description</h4><p>给一个字母串，求出它的最小表示法（就是可以进行若干次循环位移，使得串的字典序尽可能小）。</p><p><span class="math inline">\(n\leq 10^{5}\)</span>。</p><h4 id="solution-4">Solution</h4><p>把串复制两份接一块，那么很显然就是要求新串的一个长度为<span class="math inline">\(n\)</span>的子串，使得这个串的字典序最小。</p><p>那么考虑建新串的后缀自动机。从根开始每一步走尽可能小的转移边即可。</p><h3 id="libreoj-2033-sdoi2016生成魔咒">LibreOJ 2033 「SDOI2016」生成魔咒</h3><h4 id="description-5">Description</h4><p>有一个初始为空的整数串<span class="math inline">\(S\)</span>，要求动态的往尾部加数，每次操作完后求数字串的本质不同子串数目。</p><p>操作次数不超过十万次，<span class="math inline">\(S\)</span>中的数在<span class="math inline">\([1, 10^9]\)</span>中。</p><h4 id="solution-5">Solution</h4><p><a href="http://danihao123.is-programmer.com/posts/212330.html" target="_blank" rel="noopener">参考原博客</a></p><h3 id="spoj-nsubstr">SPOJ NSUBSTR</h3><h4 id="description-6">Description</h4><p>给一个字符串<span class="math inline">\(S\)</span>，用<span class="math inline">\(F(x)\)</span>表示所有<span class="math inline">\(S\)</span>的长度为<span class="math inline">\(x\)</span>的子串中出现次数的最大值。求<span class="math inline">\(F(1)\ldots F(|S|)\)</span>。</p><p><span class="math inline">\(|S|\leq 250000\)</span>。</p><h4 id="solution-6">Solution</h4><p><a href="http://danihao123.is-programmer.com/posts/212325.html" target="_blank" rel="noopener">参考原博客</a></p><h3 id="spoj-lcs2">SPOJ LCS2</h3><h4 id="description-7">Description</h4><p>给你至多十个串，求他们的最长公共子串。</p><p>每个串的大小不超过十万。</p><h4 id="solution-7">Solution</h4><p><a href="http://danihao123.is-programmer.com/posts/212405.html" target="_blank" rel="noopener">参考原博客</a></p><h3 id="libreoj-2102-tjoi2015弦论">LibreOJ 2102 「TJOI2015」弦论</h3><h4 id="description-8">Description</h4><p>对于一个长为<span class="math inline">\(n\)</span>的小写字母串<span class="math inline">\(S\)</span>，求它的第<span class="math inline">\(k\)</span>小子串。</p><p>每组数据还给定一个<span class="math inline">\(T\)</span>，表示对于不同位置的相同子串是否算一种。</p><p><span class="math inline">\(n\leq 5\times 10^5, k\leq 10^9\)</span>。</p><h4 id="solution-8">Solution</h4><p><a href="http://danihao123.is-programmer.com/posts/212340.html" target="_blank" rel="noopener">参考原博客</a></p><h3 id="libreoj-2137-zjoi2015诸神眷顾的幻想乡">LibreOJ 2137 「ZJOI2015」诸神眷顾的幻想乡</h3><h4 id="description-9">Description</h4><p>给出一个点上写着字符（这里字符定义为小于<span class="math inline">\(c\)</span>的自然数）的树，<strong>度数为1的点的数量不超过20</strong>。定义其子串为从一个点延最短路走到另一个点（显然方案唯一），把经过的点上的字符顺次写下来所得到的字符串。</p><p>求这棵树有多少种本质不同子串。</p><p><span class="math inline">\(1\leq n\leq 10^5, 1\leq c\leq 10\)</span>。</p><h4 id="solution-9">Solution</h4><p><a href="http://danihao123.is-programmer.com/posts/212550.html" target="_blank" rel="noopener">参考原博客</a></p>]]></content>
      
      <categories>
          
          <category> 大坑 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SPOJ </tag>
            
            <tag> LibreOJ </tag>
            
            <tag> 后缀自动机 </tag>
            
            <tag> 后缀数组 </tag>
            
            <tag> 后缀树 </tag>
            
            <tag> 后缀平衡树 </tag>
            
            <tag> POJ </tag>
            
            <tag> SDOI </tag>
            
            <tag> TJOI </tag>
            
            <tag> HEOI </tag>
            
            <tag> ZJOI </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>LibreOJ 6052 「雅礼集训 2017 Day11」DIV</title>
      <link href="/2018/07/24/loj6052/"/>
      <url>/2018/07/24/loj6052/</url>
      <content type="html"><![CDATA[<h2 id="description">Description</h2><p>定义复数<span class="math inline">\(a + bi\)</span>为<span class="math inline">\(k\)</span>的约数，当且仅当<span class="math inline">\(a, b\)</span>为整数且存在整数<span class="math inline">\(c, d\)</span>满足<span class="math inline">\((a + bi)(c + di) = k\)</span>。</p><p>给定<span class="math inline">\(n\)</span>，求<span class="math inline">\(1\)</span>到<span class="math inline">\(n\)</span>中所有整数的实部大于<span class="math inline">\(0\)</span>的约数的实部的和。</p><p>答案模<code>1004535809</code>。</p><p><span class="math inline">\(n\leq 10^{10}\)</span>。</p><a id="more"></a><h2 id="solution">Solution</h2><p><del>为啥这题和某课件上的简化版差距这么大啊……</del></p><p>考虑一个复数<span class="math inline">\((a + bi)(c + di) = k\)</span>意味着什么，其实也就是下面两个式子： <span class="math display">\[ac - bd = k\\ad + bc = 0\]</span> 由第二个式子可得： <span class="math display">\[\frac{a}{b} = -\frac{c}{d}\]</span> 那么我们考虑将<span class="math inline">\(a, b\)</span>约去他们两个之间的最大公约数，<span class="math inline">\(c, d\)</span>也做一样的操作。那么上式还是成立的，并且等号两边的分式都已经最简化了，因此此时有<span class="math inline">\(a = c, b = -d\)</span>。</p><p>带回最早的式子（两个复数的积那个）可以得到： <span class="math display">\[c(a^2 + b^2) = k\]</span> 这个<span class="math inline">\(c\)</span>是我们先前约去的常数的积。从此式也可以看出<span class="math inline">\((a^2+b^2)|k\)</span>，并且贡献一定是<span class="math inline">\(a\)</span>乘上一个常数。</p><p>那么我们枚举互质数对<span class="math inline">\((a, b)\)</span>，其对答案的贡献是<span class="math inline">\(a\sigma(\frac{n}{a^2 + b^2})\)</span>（这里<span class="math inline">\(\sigma\)</span>表示<span class="math inline">\(\sigma_1\)</span>，即约束之和）。</p><p>因此最终答案为： <span class="math display">\[\begin{aligned}\quad&amp;\sum_{i = 1}^n\sum_{a\perp b, (a^2 + b^2) | i} a\sigma(\frac{i}{a^2+b^2})\end{aligned}\]</span> 这玩怕不是几乎不可做……因此我们考虑枚举<span class="math inline">\(k = a^2 + b^2\)</span>： <span class="math display">\[\begin{aligned}\quad&amp;\sum_{k = 1}^n\sum_{a\perp b, a^2 + b^2 = k} a\sum_{k | i}\sigma(\frac{i}{k})\\=&amp;\sum_{k = 1}^n\sum_{a\perp b, a^2 + b^2 = k} aD(\lfloor\frac{n}{k}\rfloor)\\=&amp;\sum_{k = 1}^nD(\lfloor\frac{n}{k}\rfloor)\sum_{a\perp b, a^2 + b^2 = k} a\\=&amp;\sum_{k = 1}^nD(\lfloor\frac{n}{k}\rfloor)f(k)\end{aligned}\]</span> 其中<span class="math inline">\(D\)</span>为<span class="math inline">\(\sigma\)</span>的前缀和，<span class="math inline">\(f(k)\)</span>表记的是啥可以根据上下文推导一下（逃</p><p>这个形式几乎和杜教筛如出一辙……像杜教筛一样先大力数论分块，然后先考虑怎么处理<span class="math inline">\(D\)</span>，很显然有一个<span class="math inline">\(O(\sqrt{n})\)</span>的做法： <span class="math display">\[\sum_{i = 1}^n i\lfloor\frac{n}{i}\rfloor\]</span> 如此一来我们可以考虑先预处理不大于<span class="math inline">\(n^\frac{2}{3}\)</span>的<span class="math inline">\(D\)</span>值，其他情况用上面的式子求（甚至不需要记忆化复杂度也是对的）。用杜教筛那种复杂度证明可以证出这部分的复杂度是<span class="math inline">\(O(n^\frac{2}{3})\)</span>的。</p><p>然后我们发现我们其实也要处理<span class="math inline">\(f​\)</span>的前缀和<span class="math inline">\(F​\)</span>……但是有个互质在这这个玩意并不好处理。那么我们考虑类似于狄利克雷卷积的一些思路？定义一个<span class="math inline">\(G(x) = \sum_{1\leq a^2+b^2\leq x}a​\)</span>，这个东西可以很方便的用<span class="math inline">\(O(\sqrt{n})​\)</span>的复杂度求（<span class="math inline">\(G(x)=\sum_{i = 1}^{\lfloor\sqrt{x}\rfloor}i\lfloor\sqrt{x - i^2}\rfloor​\)</span>），然后我们发现有： <span class="math display">\[G(x) = \sum_{i = 1}^{\lfloor\sqrt{x}\rfloor}iF(\lfloor\frac{x}{i^2}\rfloor)\]</span> 然后这个还是有点像杜教筛的一些形式啊！我们发现我们要抽出来的事<span class="math inline">\(F(x)\)</span>，因此移一下项就有了： <span class="math display">\[F(x)=G(x) - \sum_{i = 2}^{\lfloor\sqrt{x}\rfloor}iF(\lfloor\frac{x}{i^2}\rfloor)\]</span> 还是如出一辙的处理套路啊……对于大于<span class="math inline">\(n^\frac{2}{3}\)</span>的情况我们直接用这个式子<span class="math inline">\(O(\sqrt{n})\)</span>求（顺便记忆化）；其他情况就要考虑预处理了，那么我们考虑预处理<span class="math inline">\(f(x)\)</span>本身，这个东西可以通过枚举<span class="math inline">\(a\)</span>然后枚举<span class="math inline">\(b\)</span>最后判断是否互质的搞法在<span class="math inline">\(O(n^\frac{2}{3}\log n)\)</span>的复杂度里搞出来。总复杂度证明还是和杜教筛如出一辙。</p><p>然后做完了？其实并没有。我们上面钦点了复数虚部为正整数。至于负整数和正整数的情况对称，答案完全一致。如果虚部为<span class="math inline">\(0\)</span>的话那么参与运算的全都是正整数，因此此时答案就是<span class="math inline">\(D(n)\)</span>了。</p><h2 id="code">Code</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">5000000</span>;</span><br><span class="line"><span class="keyword">using</span> ll = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"><span class="keyword">const</span> ll ha = <span class="number">1004535809L</span>L;</span><br><span class="line">ll d[N + <span class="number">5</span>], f[N + <span class="number">5</span>];</span><br><span class="line"><span class="keyword">int</span> prm[N + <span class="number">5</span>]; <span class="keyword">bool</span> vis[N + <span class="number">5</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">gcd</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(!b) &#123;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> gcd(b, a % b);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sieve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">  vis[<span class="number">1</span>] = <span class="literal">true</span>; d[<span class="number">1</span>] = <span class="number">1</span>; f[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= N; i ++) &#123;</span><br><span class="line">    <span class="keyword">if</span>(!vis[i]) &#123;</span><br><span class="line">      d[i] = i + <span class="number">1</span>; prm[cnt ++] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; cnt; j ++) &#123;</span><br><span class="line">      <span class="keyword">int</span> v = i * prm[j];</span><br><span class="line">      <span class="keyword">if</span>(v &gt; N) <span class="keyword">break</span>;</span><br><span class="line">      vis[v] = <span class="literal">true</span>;</span><br><span class="line">      <span class="keyword">if</span>(i % prm[j] == <span class="number">0</span>) &#123;</span><br><span class="line">        d[v] = d[i] * d[prm[j]] - (ll)prm[j] * d[i / prm[j]];</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        d[v] = d[i] * d[prm[j]];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i * i &lt;= N; i ++) &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j * j + i * i &lt;= N; j ++) &#123;</span><br><span class="line">      <span class="keyword">if</span>(gcd(i, j) == <span class="number">1</span>) &#123;</span><br><span class="line">        f[j * j + i * i] += i;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; i ++) &#123;</span><br><span class="line">    d[i] = (d[i] + d[i - <span class="number">1</span>]) % ha;</span><br><span class="line">    f[i] = (f[i] + f[i - <span class="number">1</span>]) % ha;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">unordered_map</span>&lt;ll, ll&gt; ma_d;</span><br><span class="line"><span class="function">ll <span class="title">S</span><span class="params">(ll n)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">const</span> ll inv_2 = <span class="number">502267905L</span>L;</span><br><span class="line">  ll ret = ((n % ha) * ((n + <span class="number">1</span>) % ha)) % ha;</span><br><span class="line">  ret = (ret * inv_2) % ha;</span><br><span class="line">  <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">sigma</span><span class="params">(ll n)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(n &lt;= (ll)N) <span class="keyword">return</span> d[n];</span><br><span class="line">  <span class="keyword">if</span>(ma_d.count(n)) <span class="keyword">return</span> ma_d[n];</span><br><span class="line">  ll ret = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span>(ll i = <span class="number">1</span>; i &lt;= n;) &#123;</span><br><span class="line">    ll next = n / (n / i);</span><br><span class="line">    ll delta = (S(next) - S(i - <span class="number">1</span>) + ha) % ha;</span><br><span class="line">    delta = (delta * ((n / i) % ha)) % ha;</span><br><span class="line">    ret = (ret + delta) % ha;</span><br><span class="line">    i = next + <span class="number">1L</span>L;</span><br><span class="line">  &#125;</span><br><span class="line">  ma_d[n] = ret;</span><br><span class="line">  <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">unordered_map</span>&lt;ll, ll&gt; ma_f;</span><br><span class="line"><span class="function">ll <span class="title">calc_f</span><span class="params">(ll n)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(n &lt;= (ll)N) <span class="keyword">return</span> f[n];</span><br><span class="line">  <span class="keyword">if</span>(ma_f.count(n)) <span class="keyword">return</span> ma_f[n];</span><br><span class="line">  ll ret = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span>(ll i = <span class="number">1</span>; i * i &lt;= n; i ++) &#123;</span><br><span class="line">    ll delta = <span class="built_in">floor</span>(<span class="built_in">sqrt</span>(n - i * i));</span><br><span class="line">    delta %= ha; delta = (delta * i) % ha;</span><br><span class="line">    ret = (ret + delta) % ha;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span>(ll i = <span class="number">2</span>; i * i &lt;= n; i ++) &#123;</span><br><span class="line">    ll delta = (calc_f(n / (i * i)) * i) % ha;</span><br><span class="line">    ret = (ret - delta + ha) % ha;</span><br><span class="line">  &#125;</span><br><span class="line">  ma_f[n] = ret;</span><br><span class="line">  <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">calc</span><span class="params">(ll n)</span> </span>&#123;</span><br><span class="line">  ll ret = <span class="number">0</span>, las = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span>(ll i = <span class="number">1</span>; i &lt;= n;) &#123;</span><br><span class="line">    ll next = n / (n / i);</span><br><span class="line">    ll th = calc_f(next);</span><br><span class="line">    ll delta = (th - las + ha) % ha;</span><br><span class="line">    delta = (delta * sigma(n / i)) % ha;</span><br><span class="line">    ret = (ret + delta) % ha;</span><br><span class="line">    las = th; i = next + <span class="number">1L</span>L;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  sieve();</span><br><span class="line">  ll n; <span class="built_in">scanf</span>(<span class="string">"%lld"</span>, &amp;n);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, (calc(n) * <span class="number">2L</span>L + sigma(n)) % ha);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 狄利克雷卷积 </tag>
            
            <tag> 杜教筛 </tag>
            
            <tag> LibreOJ </tag>
            
            <tag> 雅礼集训 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>LibreOJ 6053 简单的函数</title>
      <link href="/2018/07/24/loj6053/"/>
      <url>/2018/07/24/loj6053/</url>
      <content type="html"><![CDATA[<h2 id="description">Description</h2><p>今有一积性函数<span class="math inline">\(f(x)\)</span>，满足以下性质</p><ul><li><span class="math inline">\(f(1) = 1\)</span>。</li><li>对任意质数<span class="math inline">\(p\)</span>和正整数<span class="math inline">\(c\)</span>，有<span class="math inline">\(f(p^c) = p\oplus c\)</span>。</li></ul><p>给定正整数<span class="math inline">\(n\)</span>，求<span class="math inline">\(\sum_{i = 1}^n f(i)\)</span>，答案模<code>1000000007</code>。</p><p><span class="math inline">\(n\leq 10^{10}\)</span>。</p><a id="more"></a><h2 id="solution">Solution</h2><p>算是一道<del>不那么水的</del>Min_25筛板子题？</p><p>Min_25筛最核心的地方就是对于质数的答案求前缀和。那么我们考虑对任意质数<span class="math inline">\(p\)</span>，<span class="math inline">\(f(p)\)</span>的取值。然后我们会发现除了<span class="math inline">\(2\)</span>以外的所有质数都是奇数，所以对于<span class="math inline">\(2\)</span>有<span class="math inline">\(f(p) = p + 1\)</span>，对其他质数有<span class="math inline">\(f(p) = p - 1\)</span>。</p><p>那么我们把质数的答案分为两部分考虑：一部分是<span class="math inline">\(p\)</span>，另一部分是后面的加减一。前面一部分就是质数本身的和，几乎就是最简单的Min_25筛；后面也不难，只需要对于小于等于2的情况特判一下就完了。</p><p>然后下面就是标准的Min_25筛了……<del>Min_25筛真香！</del></p><h2 id="code">Code</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">200005</span>;</span><br><span class="line"><span class="keyword">using</span> ll = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"><span class="keyword">const</span> ll ha = <span class="number">1000000007L</span>L;</span><br><span class="line"><span class="function">ll <span class="title">sqr</span><span class="params">(ll x)</span> </span>&#123;</span><br><span class="line">  ll ret = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">while</span>((ret + <span class="number">1L</span>L) * (ret + <span class="number">1L</span>L) &lt;= x) ret ++;</span><br><span class="line">  <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ll n, S; <span class="keyword">int</span> cnt;</span><br><span class="line">ll A[<span class="number">2</span>][maxn]; ll prm[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sieve_0</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  S = sqr(n); cnt = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= S; i ++) &#123;</span><br><span class="line">    A[<span class="number">0</span>][i] = i;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= S; i ++) &#123;</span><br><span class="line">    A[<span class="number">1</span>][i] = (n / (ll(i))) % ha;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= S; i ++) &#123;</span><br><span class="line">    <span class="keyword">if</span>(A[<span class="number">0</span>][i - <span class="number">1</span>] == A[<span class="number">0</span>][i]) <span class="keyword">continue</span>;</span><br><span class="line">    prm[++ cnt] = i;</span><br><span class="line">    ll lim = (ll(i)) * (ll(i)), v = A[<span class="number">0</span>][i - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= S / i; j ++) &#123;</span><br><span class="line">      ll delta = (A[<span class="number">1</span>][j * i] - v + ha) % ha;</span><br><span class="line">      A[<span class="number">1</span>][j] = (A[<span class="number">1</span>][j] - delta + ha) % ha;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = S / i + <span class="number">1</span>; j &lt;= S; j ++) &#123;</span><br><span class="line">      ll src = n / ((ll(j)) * (ll(i)));</span><br><span class="line">      <span class="keyword">if</span>(src &lt; (ll)i) <span class="keyword">break</span>;</span><br><span class="line">      ll delta = (A[<span class="number">0</span>][src] - v + ha) % ha;</span><br><span class="line">      A[<span class="number">1</span>][j] = (A[<span class="number">1</span>][j] - delta + ha) % ha;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = S; (ll)j &gt;= lim; j --) &#123;</span><br><span class="line">      ll delta = (A[<span class="number">0</span>][j / i] - v + ha) % ha;</span><br><span class="line">      A[<span class="number">0</span>][j] = (A[<span class="number">0</span>][j] - delta + ha) % ha;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  prm[++ cnt] = S + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">ll B[<span class="number">2</span>][maxn];</span><br><span class="line"><span class="function">ll <span class="title">S1</span><span class="params">(ll x)</span> </span>&#123;</span><br><span class="line">  ll a = x, b = x + <span class="number">1L</span>L;</span><br><span class="line">  <span class="keyword">if</span>(x &amp; <span class="number">1L</span>L) &#123;</span><br><span class="line">    b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    a &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  a %= ha; b %= ha;</span><br><span class="line">  <span class="keyword">return</span> (a * b) % ha;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sieve_1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  S = sqr(n); cnt = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= S; i ++) &#123;</span><br><span class="line">    B[<span class="number">0</span>][i] = S1(i);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= S; i ++) &#123;</span><br><span class="line">    B[<span class="number">1</span>][i] = S1(n / (ll(i)));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= S; i ++) &#123;</span><br><span class="line">    <span class="keyword">if</span>(B[<span class="number">0</span>][i - <span class="number">1</span>] == B[<span class="number">0</span>][i]) <span class="keyword">continue</span>;</span><br><span class="line">    prm[++ cnt] = i;</span><br><span class="line">    ll lim = (ll(i)) * (ll(i)), v = B[<span class="number">0</span>][i - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= S / i; j ++) &#123;</span><br><span class="line">      ll delta = (B[<span class="number">1</span>][j * i] - v + ha) % ha;</span><br><span class="line">      delta = (delta * (ll(i))) % ha;</span><br><span class="line">      B[<span class="number">1</span>][j] = (B[<span class="number">1</span>][j] - delta + ha) % ha;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = S / i + <span class="number">1</span>; j &lt;= S; j ++) &#123;</span><br><span class="line">      ll src = n / ((ll(j)) * (ll(i)));</span><br><span class="line">      <span class="keyword">if</span>(src &lt; (ll)i) <span class="keyword">break</span>;</span><br><span class="line">      ll delta = (B[<span class="number">0</span>][src] - v + ha) % ha;</span><br><span class="line">      delta = (delta * (ll(i))) % ha;</span><br><span class="line">      B[<span class="number">1</span>][j] = (B[<span class="number">1</span>][j] - delta + ha) % ha;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = S; (ll)j &gt;= lim; j --) &#123;</span><br><span class="line">      ll delta = (B[<span class="number">0</span>][j / i] - v + ha) % ha;</span><br><span class="line">      delta = (delta * (ll(i))) % ha;</span><br><span class="line">      B[<span class="number">0</span>][j] = (B[<span class="number">0</span>][j] - delta + ha) % ha;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  prm[++ cnt] = S + <span class="number">1</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= cnt; i ++) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"prm[%d] : %lld\n"</span>, i, prm[i]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= S; i ++) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"B[%d] : %lld\n"</span>, i, B[<span class="number">0</span>][i]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = S; i &gt;= <span class="number">1</span>; i --) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"B[%lld] : %lld\n"</span>, n / (ll(i)), B[<span class="number">1</span>][i]);</span><br><span class="line">  &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">query_0</span><span class="params">(ll x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(x &lt;= <span class="number">1L</span>L) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span>(x == <span class="number">2L</span>L) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  ll ret;</span><br><span class="line">  <span class="keyword">if</span>(x &lt;= S) &#123;</span><br><span class="line">    ret = A[<span class="number">0</span>][x];</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    ret = A[<span class="number">1</span>][n / x];</span><br><span class="line">  &#125;</span><br><span class="line">  ret --;</span><br><span class="line">  ret = (<span class="number">2L</span>L - ret + ha) % ha;</span><br><span class="line">  <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">query_1</span><span class="params">(ll x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(x &lt;= S) &#123;</span><br><span class="line">    <span class="keyword">return</span> B[<span class="number">0</span>][x];</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> B[<span class="number">1</span>][n / x];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">calc</span><span class="params">(ll m, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(m &lt; prm[x]) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  ll ret = (query_0(m) + query_1(m)) % ha;</span><br><span class="line">  ret = (ret - (query_0(prm[x] - <span class="number">1</span>) + query_1(prm[x] - <span class="number">1</span>)) % ha + ha) % ha;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = x; i &lt;= cnt; i ++) &#123;</span><br><span class="line">    ll st = prm[i];</span><br><span class="line">    <span class="keyword">if</span>(st * prm[i] &gt; m) <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; ; j ++) &#123;</span><br><span class="line">      <span class="keyword">if</span>(st * prm[i] &gt; m) <span class="keyword">break</span>;</span><br><span class="line">      ll delta = ((calc(m / st, i + <span class="number">1</span>) * (prm[i] ^ (ll(j)))) % ha + (prm[i] ^ (ll(j + <span class="number">1</span>)))) % ha;</span><br><span class="line">      ret = (ret + delta) % ha;</span><br><span class="line">      st *= prm[i];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">"%lld"</span>, &amp;n);</span><br><span class="line">  sieve_0(); sieve_1();</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, (<span class="number">1L</span>L + calc(n, <span class="number">1</span>)) % ha);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Min_25筛 </tag>
            
            <tag> LibreOJ </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>BZOJ 4314 倍数？倍数！</title>
      <link href="/2018/07/21/BZOJ4314/"/>
      <url>/2018/07/21/BZOJ4314/</url>
      <content type="html"><![CDATA[<h2 id="description">Description</h2><p>要求你从<span class="math inline">\(Z_n\)</span>（模<span class="math inline">\(n\)</span>的剩余系）里选出<span class="math inline">\(k\)</span>个不重复元素，使得他们的和模<span class="math inline">\(n\)</span>为0。求方案数。</p><p><span class="math inline">\(1\leq n\leq 10^9, 1\leq k\leq 10^3\)</span>。</p><a id="more"></a><h2 id="solution">Solution</h2><p>看上去就很像单位根反演的题？</p><p>先放一下众所周知的单位根反演的式子： <span class="math display">\[\frac{1}{n}\sum_{i = 0}^{n - 1}(\xi_{n}^i)^k=[n | k]\]</span> 证明很容易：假如有<span class="math inline">\(n | k\)</span>，那么和式中每一项都是1，加起来除<span class="math inline">\(n\)</span>后就事1了（这种情况下等比数列公比为1，所以不可以采用等比数列求和公式）；反之，我们采用等比数列求和公式可知原式中的和式为<span class="math inline">\(\frac{1 - \xi_n^{kn}}{1 - \xi_n^k}\)</span>，这个东西的分子为0，那么自然和式左边为0。</p><p>那么考虑构造二元答案多项式<span class="math inline">\(f(x, y)\)</span>： <span class="math display">\[f(x, y) = \prod_{i = 0}^{n - 1}(1 + x^iy)\]</span> 这个多项式的每一项中<span class="math inline">\(x\)</span>的次数表示和，<span class="math inline">\(y\)</span>表示选数的数量。我们显然要求所有含<span class="math inline">\(y^k\)</span>且<span class="math inline">\(x\)</span>的次数为<span class="math inline">\(n\)</span>的倍数的项的系数之和，那么考虑将<span class="math inline">\(y\)</span>视为常数，对<span class="math inline">\(x\)</span>进行单位根反演： <span class="math display">\[f(\xi_n^t, y)=\prod_{i = 0}^{n - 1}(1 + (\xi_n^{t})^iy)\]</span> 观察到如果<span class="math inline">\(t\)</span>和<span class="math inline">\(n\)</span>不互质，那么两者可以同时约去一约数（反之，若有<span class="math inline">\(t\perp n\)</span>，那么称<span class="math inline">\(\xi_n^t\)</span>为一个<span class="math inline">\(n\)</span>次本原单位根）。假设约完之后的单位根为<span class="math inline">\(\xi_a^b\)</span>，那么我们发现当积式中枚举的<span class="math inline">\(i\)</span>大于<span class="math inline">\(a\)</span>时，会出现循环。所以我们只需要取循环节（显然长度为<span class="math inline">\(a\)</span>，因为我们知道所有<span class="math inline">\(a\)</span>阶单位根构成一个循环群，而<span class="math inline">\(a\)</span>阶本原单位根一定是该群的生成元。原因事首先显然用<span class="math inline">\(\xi_a^1\)</span>可以生成所有<span class="math inline">\(a\)</span>阶单位根，所以所有<span class="math inline">\(a\)</span>阶单位根构成一个循环群；然后你根据数论里的欧拉定理可以知道<span class="math inline">\(x^{\phi(p)}\equiv 1\pmod{p}(x\perp p)\)</span>，那么对于任意本原单位根<span class="math inline">\(\xi_a^b\)</span>有<span class="math inline">\(\xi_a^{b^{\phi(a)}} = \xi_a^1\)</span>，式子左边的东西是<span class="math inline">\(\xi_a^b\)</span>的若干次方，所以用<span class="math inline">\(\xi_a^b\)</span>可以生成<span class="math inline">\(\xi_a^1\)</span>，自然就可以生成整个循环群）的若干次方就行了，那么有： <span class="math display">\[f(\xi_a^b, y) = (\prod_{i = 0}^{a - 1}(1 + (\xi_a^b)^iy))^\frac{n}{a}\]</span></p><p>根据上面的说法，考虑里面的积式一定可以枚举到所有<span class="math inline">\(a\)</span>阶单位根，所以这个积式也可以写成： <span class="math display">\[f(\xi_a^b, y) = (\prod_{i = 0}^{a - 1} (1 + \xi_a^iy))^\frac{n}{a}\]</span> 这么一来，我们发现对于任意<span class="math inline">\(a\)</span>阶本原单位根<span class="math inline">\(\xi_a^b\)</span>，对答案的贡献都是一样的，而我们知道<span class="math inline">\(a\)</span>阶本原单位根有<span class="math inline">\(\phi(a)\)</span>个。只要我们对所有<span class="math inline">\(n\)</span>的约数求出其所有本原单位根的贡献的和，那么这题就做完了。</p><p>那么我们考虑，如果我们知道了<span class="math inline">\(a\)</span>，那么怎么快速求一个本原单位根的贡献呢？</p><p>考虑那个多项式（里面的积式），首先很容易发现其0次项为1。然后我们从零点入手……</p><p>然后我们发现这个多项式几乎没法求零点……那么我们做一步小转换吧： <span class="math display">\[\prod_{i = 0}^{a - 1}\xi_a^i(\xi_a^{a - i} + y)\]</span></p><p>然后我们发现<span class="math inline">\(\xi_a^{a - i}\)</span>就枚举了所有单位根，所以零点集合就是所有单位根相反数的集合。</p><p>如果<span class="math inline">\(a\)</span>为偶数，那么把所有单位根取相反数之后得到的集合其实和原集合事一样的……这个大致可以理解为所有单位根构成的图形关于原点中心对称。而我们知道<span class="math inline">\(x^a - 1 = 0\)</span>的解就是全体<span class="math inline">\(a\)</span>阶单位根，因此答案多项式和<span class="math inline">\(x^a - 1\)</span>只有常数项的不同，而取反之后得到了<span class="math inline">\(1 - x^a\)</span>，其零点、常数项都符合我们的要求。</p><p>如果<span class="math inline">\(a\)</span>为奇数，那么考虑<span class="math inline">\(x^a\)</span>，往里面带一个单位根的相反数的话，因为<span class="math inline">\(a\)</span>为奇数所以会得到<span class="math inline">\(-1\)</span>，所以该多项式的零点就是<span class="math inline">\(x^a + 1 = 0\)</span>的全体解。而左边多项式的常数项也符合我们的要求，因此此时多项式为<span class="math inline">\(1 + x^a\)</span>。</p><p>综上可得： <span class="math display">\[\prod_{i = 0}^{a - 1}(1 + \xi_a^iy) = 1 - (-y)^a\]</span> 而最后的答案多项式为： <span class="math display">\[\frac{1}{n}\sum_{d | n}\phi(d)(1 - (-y)^d)^\frac{n}{d}\]</span> 这个东西的<span class="math inline">\(y^k\)</span>项的系数就是答案了……</p><h2 id="code">Code</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll ha = <span class="number">1000000007L</span>L;</span><br><span class="line"><span class="function">ll <span class="title">pow_mod</span><span class="params">(ll a, ll b)</span> </span>&#123;</span><br><span class="line">  ll ans = <span class="number">1L</span>L, res = a;</span><br><span class="line">  <span class="keyword">while</span>(b) &#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="number">1L</span>L &amp; b) ans = (ans * res) % ha;</span><br><span class="line">    res = (res * res) % ha; b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">inv</span><span class="params">(ll x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> pow_mod(x, ha - <span class="number">2L</span>L);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function">ll <span class="title">sqrt</span><span class="params">(ll n)</span> </span>&#123;</span><br><span class="line">  ll ans = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">while</span>((ans + <span class="number">1L</span>L) * (ans + <span class="number">1L</span>L) &lt;= n) ans ++;</span><br><span class="line">  <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">phi</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> ans = n, m = <span class="built_in">sqrt</span>(n);</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= m; i ++) &#123;</span><br><span class="line">    <span class="keyword">if</span>(n % i == <span class="number">0</span>) &#123;</span><br><span class="line">      ans = (ans / i) * (i - <span class="number">1</span>);</span><br><span class="line">      <span class="keyword">while</span>(n % i == <span class="number">0</span>) n /= i;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(n &gt; <span class="number">1</span>) ans = (ans / n) * (n - <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">C</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(n &lt; m) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  ll ans = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i ++) &#123;</span><br><span class="line">    ans = (ans * (ll(n - i + <span class="number">1</span>))) % ha;</span><br><span class="line">    ans = (ans * inv(i)) % ha;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">query</span><span class="params">(<span class="keyword">int</span> d, <span class="keyword">int</span> nd, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(k % d != <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  ll ret = phi(d);</span><br><span class="line">  <span class="keyword">if</span>(d % <span class="number">2</span> == <span class="number">0</span> &amp;&amp; (k / d) % <span class="number">2</span> != <span class="number">0</span>) &#123;</span><br><span class="line">    ret = (ha - ret) % ha;</span><br><span class="line">  &#125;</span><br><span class="line">  ret = (ret * C(nd, k / d)) % ha;</span><br><span class="line">  <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">calc</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> m = <span class="built_in">sqrt</span>(n); ll ans = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i ++) &#123;</span><br><span class="line">    <span class="keyword">if</span>(n % i != <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">    ans = (ans + query(i, n / i, k)) % ha;</span><br><span class="line">    <span class="keyword">if</span>(i * i != n) ans = (ans + query(n / i, i, k)) % ha;</span><br><span class="line">  &#125;</span><br><span class="line">  ans = (ans * inv(n)) % ha;</span><br><span class="line">  <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> n, k; <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;k);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, calc(n, k));</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BZOJ </tag>
            
            <tag> 单位根 </tag>
            
            <tag> 单位根反演 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>UOJ 221「NOI2016」循环之美</title>
      <link href="/2018/07/21/NOI2016D1T3/"/>
      <url>/2018/07/21/NOI2016D1T3/</url>
      <content type="html"><![CDATA[<h2 id="description">Description</h2><p>求有多少数值不同的分数<span class="math inline">\(\frac{x}{y}\)</span>（<span class="math inline">\(1\leq x\leq n, 1\leq y\leq m\)</span>），满足其在<span class="math inline">\(k\)</span>进制下化为小数之后事纯循环小数（即小数部分是无限循环的）。</p><p><span class="math inline">\(1\leq n, m\leq 10^9,2\leq k\leq 2000\)</span>。</p><a id="more"></a><h2 id="solution">Solution</h2><p>首先如果只统计最简分数就能保证数值相同辣（即钦点<span class="math inline">\(x\perp y\)</span>，这里用垂直符号表示互质）。然后通过<del>猜结论等手段</del>可以发现纯循环小数其实限制了<span class="math inline">\(y\perp k\)</span>。</p><p>然后考虑颓柿子： <span class="math display">\[\begin{aligned}\quad&amp;\sum_{x = 1}^n\sum_{y = 1}^m [x\perp y][y\perp k]\\=&amp;\sum_{x = 1}^n\sum_{y = 1,y\perp k}^m \sum_{d | x, d | y}\mu(d)\\=&amp;\sum_{d = 1,d\perp k}^{\min(n, m)}\mu(d)\lfloor\frac{n}{d}\rfloor\sum_{y = 1}^{\lfloor\frac{m}{d}\rfloor}[y\perp k]\end{aligned}\]</span> 然后这样是个反演的形式……很容易想到数论分块罢……</p><p>接下来首先要考虑对于所有<span class="math inline">\(\lfloor\frac{m}{d}\rfloor\)</span>处理出范围内和<span class="math inline">\(k\)</span>互质的数的数量，这个很容易想到洲阁筛的思路。考虑筛出<span class="math inline">\(k\)</span>的所有质因子<span class="math inline">\(p_1,p_2,\ldots,p_c\)</span>，定义状态<span class="math inline">\(f(i, j)\)</span>表示不大于<span class="math inline">\(j\)</span>且和<span class="math inline">\(p_1, p_2,\ldots,p_i\)</span>互质的数的数目（边界为<span class="math inline">\(f(0, j) = j\)</span>）。然后转移很显然是： <span class="math display">\[f(i, j) = f(i - 1, j) - f(i - 1, \lfloor\frac{j}{p_i}\rfloor)\]</span> 然后我们还有一块硬骨头……就是对于所有<span class="math inline">\(\lfloor\frac{n}{d}\rfloor\)</span>要求出范围内和<span class="math inline">\(k\)</span>互质的<span class="math inline">\(d\)</span>的<span class="math inline">\(\mu(d)\)</span>的和。还是采用洲阁筛的思路，定义<span class="math inline">\(g(i, j)\)</span>表示对于所有<span class="math inline">\(d\)</span>满足<span class="math inline">\(d\leq j\)</span>且<span class="math inline">\(d\perp p_1, p_2,\ldots, p_i\)</span>的<span class="math inline">\(\mu(d)\)</span>的和，这样边界<span class="math inline">\(g(0, j)\)</span>也就是直接对<span class="math inline">\(\mu\)</span>求一个前缀和，这个杜教筛处理。其他情况的话，我们要排除在一个没有前<span class="math inline">\(i\)</span>个质因子的数的基础上乘上<span class="math inline">\(p_i\)</span>的情况（如果有<span class="math inline">\(p_i\)</span>这个质因子的话再乘一遍就变成0了，所以对答案没有影响），故转移如下： <span class="math display">\[g(i,j)=g(i - 1, j) + g(i, \lfloor\frac{j}{p_i}\rfloor)\]</span> 考虑到这题<span class="math inline">\(k\)</span>不大，所以第一维非常的小，甚至不需要用洲阁筛的一般加速方法。总复杂度为<span class="math inline">\(O(n^\frac{2}{3} + \omega(k)\sqrt{n})\)</span>。</p><h2 id="code">Code</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> ll = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">10000000</span>;</span><br><span class="line"><span class="keyword">int</span> mu[N + <span class="number">5</span>]; <span class="keyword">int</span> mu_S[N + <span class="number">5</span>];</span><br><span class="line"><span class="keyword">int</span> prm[N + <span class="number">5</span>]; <span class="keyword">bool</span> vis[N + <span class="number">5</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">process</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  mu[<span class="number">1</span>] = <span class="number">1</span>; vis[<span class="number">1</span>] = <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= N; i ++) &#123;</span><br><span class="line">    <span class="keyword">if</span>(!vis[i]) &#123;</span><br><span class="line">      prm[cnt ++] = i;</span><br><span class="line">      mu[i] = <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; cnt &amp;&amp; i * prm[j] &lt;= N; j ++) &#123;</span><br><span class="line">      <span class="keyword">int</span> v = i * prm[j];</span><br><span class="line">      vis[v] = <span class="literal">true</span>;</span><br><span class="line">      <span class="keyword">if</span>(i % prm[j] == <span class="number">0</span>) &#123;</span><br><span class="line">        mu[v] = <span class="number">0</span>; <span class="keyword">break</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        mu[v] = -mu[i];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; i ++) &#123;</span><br><span class="line">    mu_S[i] = mu_S[i - <span class="number">1</span>] + mu[i];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> p[<span class="number">12</span>]; <span class="keyword">int</span> pcnt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">desc</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">  pcnt = <span class="number">0</span>; <span class="keyword">int</span> l = <span class="built_in">sqrt</span>(x + <span class="number">0.5</span>);</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= l; i ++) &#123;</span><br><span class="line">    <span class="keyword">if</span>(x % i == <span class="number">0</span>) &#123;</span><br><span class="line">      p[++ pcnt] = i;</span><br><span class="line">      <span class="keyword">while</span>(x % i == <span class="number">0</span>) x /= i;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(x &gt; <span class="number">1</span>) p[++ pcnt] = x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>, ll&gt; h1[<span class="number">12</span>];</span><br><span class="line"><span class="function">ll <span class="title">calc_1</span><span class="params">(<span class="keyword">int</span> c, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(c == <span class="number">0</span>) <span class="keyword">return</span> n;</span><br><span class="line">  <span class="keyword">if</span>(n == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span>(h1[c].count(n)) <span class="keyword">return</span> h1[c][n];</span><br><span class="line">  ll ret = calc_1(c - <span class="number">1</span>, n) - calc_1(c - <span class="number">1</span>, n / p[c]);</span><br><span class="line">  h1[c][n] = ret;</span><br><span class="line">  <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>, ll&gt; h2[<span class="number">12</span>];</span><br><span class="line"><span class="function">ll <span class="title">calc_2</span><span class="params">(<span class="keyword">int</span> c, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(c == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(n &lt;= N) <span class="keyword">return</span> mu_S[n];</span><br><span class="line">    <span class="keyword">if</span>(h2[<span class="number">0</span>].count(n)) <span class="keyword">return</span> h2[<span class="number">0</span>][n];</span><br><span class="line">    ll ret = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n;) &#123;</span><br><span class="line">      <span class="keyword">int</span> next = n / (n / i);</span><br><span class="line">      ret -= (ll(next - i  + <span class="number">1</span>)) * calc_2(<span class="number">0</span>, n / i);</span><br><span class="line">      i = next + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    h2[<span class="number">0</span>][n] = ret;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(n == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span>(h2[c].count(n)) <span class="keyword">return</span> h2[c][n];</span><br><span class="line">  ll ret = calc_2(c - <span class="number">1</span>, n) + calc_2(c, n / p[c]);</span><br><span class="line">  h2[c][n] = ret;</span><br><span class="line">  <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">calc</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">  desc(k); ll ans = <span class="number">0</span>;</span><br><span class="line">  ll las = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="built_in">std</span>::min(n, m);) &#123;</span><br><span class="line">    <span class="keyword">int</span> next = <span class="built_in">std</span>::min(n / (n / i), m / (m / i));</span><br><span class="line">    ll th = n / i;</span><br><span class="line">    th *= (ll)calc_1(pcnt, m / i);</span><br><span class="line">    ll ts = calc_2(pcnt, next);</span><br><span class="line">    th *= (ts - las);</span><br><span class="line">    ans += th;</span><br><span class="line">    i = next + <span class="number">1</span>; las = ts;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  process();</span><br><span class="line">  <span class="keyword">int</span> n, m, k; <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;n, &amp;m, &amp;k);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, calc(n, m, k));</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UOJ </tag>
            
            <tag> NOI </tag>
            
            <tag> 狄利克雷卷积 </tag>
            
            <tag> 莫比乌斯反演 </tag>
            
            <tag> 洲阁筛 </tag>
            
            <tag> 杜教筛 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>BZOJ 3551「ONTAK2010」Peaks加强版</title>
      <link href="/2018/07/18/BZOJ3551/"/>
      <url>/2018/07/18/BZOJ3551/</url>
      <content type="html"><![CDATA[<p>真他X的是个弟弟。</p><p>初中会<del>嘴巴</del>的东西，高中不会了。</p><p>写了骗分，被多组数据雷普了，从75到5。</p><p>我谔谔，还事书这题罢，，，</p><a id="more"></a><p>这题大概可以用可持久化并查集套可持久化平衡树或权值线段树啥的做一下（逃</p><p>然后我们考虑用一种简单的做法……</p><p>如果我们最后的并查集树中只有原图中的点的话，那么很多信息会非常难处理，那么是否可以考虑引入边？</p><p>在Kruskal的过程中，边被从小到大加入。那么我们给每个边建一个点，用来维护经过这条边才能联通的点的信息。最后我们会得到一棵满二叉树。</p><p>这样的好处事有很多的……首先我们可以把信息维护在边上了。这个题要求<span class="math inline">\(k\)</span>大，所以我们就用可持久化权值线段树吧，然后每个非叶子结点合并信息的时候直接可持久化的线段树合并就行了。</p><p>然后还有一个小好处，就是这棵树显然从叶子向上的边点的权值事单调不降的，这样我们可以直接倍增找到一个最往上的符合限制的祖先，用这个祖先的信息就行了。</p><p>代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">200005</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxm = <span class="number">500005</span>;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span></span><br><span class="line">  <span class="keyword">int</span> u, v, d;</span><br><span class="line">  <span class="keyword">bool</span> <span class="keyword">operator</span> &lt;(<span class="keyword">const</span> Edge &amp;res) <span class="keyword">const</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> d &lt; res.d;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">Edge E[maxm];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> bufsiz = <span class="number">1024</span> * <span class="number">1024</span> * <span class="number">40</span>;</span><br><span class="line"><span class="keyword">char</span> buf[bufsiz]; <span class="keyword">char</span> *cur = buf;</span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">alloc</span><span class="params">(<span class="keyword">size_t</span> size)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(cur - buf + size &gt; bufsiz) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">malloc</span>(size);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">char</span> *ret = cur; cur += size;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line">  <span class="keyword">int</span> sumv; Node *lc, *rc;</span><br><span class="line">&#125;;</span><br><span class="line">Node *nil;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init_tree</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  nil = (Node*)alloc(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">  nil -&gt; sumv = <span class="number">0</span>; nil -&gt; lc = nil -&gt; rc = nil;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Node *<span class="title">alloc_node</span><span class="params">(<span class="keyword">int</span> v = <span class="number">0</span>, Node *lc = nil, Node *rc = nil)</span> </span>&#123;</span><br><span class="line">  Node *ret = (Node*)alloc(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">  ret -&gt; sumv = v;</span><br><span class="line">  ret -&gt; lc = lc; ret -&gt; rc = rc;</span><br><span class="line">  <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Node *<span class="title">gen_chain</span><span class="params">(<span class="keyword">int</span> L, <span class="keyword">int</span> R, <span class="keyword">int</span> p, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(L == R) &#123;</span><br><span class="line">    <span class="keyword">return</span> alloc_node(v);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">int</span> M = (L + R) / <span class="number">2</span>;</span><br><span class="line">    Node *lc = nil, *rc = nil;</span><br><span class="line">    <span class="keyword">if</span>(p &lt;= M) &#123;</span><br><span class="line">      lc = gen_chain(L, M, p, v);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      rc = gen_chain(M + <span class="number">1</span>, R, p, v);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> alloc_node(v, lc, rc);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Node *<span class="title">merge</span><span class="params">(Node *A, Node *B)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(A == nil) <span class="keyword">return</span> B;</span><br><span class="line">  <span class="keyword">if</span>(B == nil) <span class="keyword">return</span> A;</span><br><span class="line">  Node *lc = merge(A -&gt; lc, B -&gt; lc);</span><br><span class="line">  Node *rc = merge(A -&gt; rc, B -&gt; rc);</span><br><span class="line">  Node *ret = alloc_node(A -&gt; sumv + B -&gt; sumv, lc, rc);</span><br><span class="line">  <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">kth</span><span class="params">(Node *o, <span class="keyword">int</span> L, <span class="keyword">int</span> R, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(o -&gt; sumv &lt; k) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(L == R) &#123;</span><br><span class="line">    <span class="keyword">return</span> L;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">int</span> M = (L + R) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(k &lt;= o -&gt; rc -&gt; sumv) &#123;</span><br><span class="line">      <span class="keyword">return</span> kth(o -&gt; rc, M + <span class="number">1</span>, R, k);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> kth(o -&gt; lc, L, M, k - o -&gt; rc -&gt; sumv);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> p[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init_set</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">2</span> * n; i ++) &#123;</span><br><span class="line">    p[i] = i;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_fa</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(p[x] == x) &#123;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (p[x] = get_fa(p[x]));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge_set</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">  x = get_fa(x), y = get_fa(y);</span><br><span class="line">  p[x] = y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">is_same</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (get_fa(x) == get_fa(y));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> h[maxn], h2[maxn]; <span class="keyword">int</span> lsiz;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">desc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="built_in">std</span>::copy(h + <span class="number">1</span>, h + <span class="number">1</span> + n, h2 + <span class="number">1</span>);</span><br><span class="line">  <span class="built_in">std</span>::sort(h2 + <span class="number">1</span>, h2 + <span class="number">1</span> + n);</span><br><span class="line">  lsiz = <span class="built_in">std</span>::unique(h2 + <span class="number">1</span>, h2 + <span class="number">1</span> + n) - h2 - <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) &#123;</span><br><span class="line">    h[i] = <span class="built_in">std</span>::lower_bound(h2 + <span class="number">1</span>, h2 + <span class="number">1</span> + lsiz, h[i]) - h2;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> lim[maxn];</span><br><span class="line"><span class="keyword">int</span> anc[maxn][<span class="number">19</span>]; <span class="keyword">int</span> cnt;</span><br><span class="line">Node *T[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build_tree</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="built_in">memset</span>(anc, <span class="number">-1</span>, <span class="keyword">sizeof</span>(anc));</span><br><span class="line">  init_set(); init_tree(); desc();</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) &#123;</span><br><span class="line">    T[i] = gen_chain(<span class="number">1</span>, lsiz, h[i], <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">std</span>::sort(E + <span class="number">1</span>, E + <span class="number">1</span> + m); cnt = n;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i ++) &#123;</span><br><span class="line">    <span class="keyword">int</span> u = E[i].u, v = E[i].v, l = E[i].d;</span><br><span class="line">    <span class="keyword">if</span>(is_same(u, v)) <span class="keyword">continue</span>;</span><br><span class="line">    u = get_fa(u); v = get_fa(v);</span><br><span class="line">    cnt ++; lim[cnt] = l;</span><br><span class="line">    T[cnt] = merge(T[u], T[v]);</span><br><span class="line">    anc[u][<span class="number">0</span>] = anc[v][<span class="number">0</span>] = cnt;</span><br><span class="line">    merge_set(u, cnt); merge_set(v, cnt);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; (<span class="number">1</span> &lt;&lt; j) &lt; cnt; j ++) &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= cnt; i ++) &#123;</span><br><span class="line">      <span class="keyword">int</span> a = anc[i][j - <span class="number">1</span>];</span><br><span class="line">      <span class="keyword">if</span>(a != <span class="number">-1</span>) anc[i][j] = anc[a][j - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_up</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> l)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">18</span>; j &gt;= <span class="number">0</span>; j --) &#123;</span><br><span class="line">    <span class="keyword">int</span> a = anc[x][j];</span><br><span class="line">    <span class="keyword">if</span>(a != <span class="number">-1</span> &amp;&amp; lim[a] &lt;= l) &#123;</span><br><span class="line">      x = a;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> q; <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;n, &amp;m, &amp;q);</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;h[i]);</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i ++) &#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;E[i].u, &amp;E[i].v, &amp;E[i].d);</span><br><span class="line">  &#125;</span><br><span class="line">  build_tree();</span><br><span class="line">  <span class="keyword">int</span> lastans = <span class="number">0</span>;</span><br><span class="line">  h2[<span class="number">0</span>] = <span class="number">-1</span>;</span><br><span class="line">  <span class="keyword">while</span>(q --) &#123;</span><br><span class="line">    <span class="keyword">int</span> v, x, k; <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;v, &amp;x, &amp;k);</span><br><span class="line">    <span class="keyword">if</span>(lastans != <span class="number">-1</span>) &#123;</span><br><span class="line">      v ^= lastans;</span><br><span class="line">      x ^= lastans;</span><br><span class="line">      k ^= lastans;</span><br><span class="line">    &#125;</span><br><span class="line">    v = get_up(v, x);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, lastans = h2[kth(T[v], <span class="number">1</span>, lsiz, k)]);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line">    lastans = <span class="number">0</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BZOJ </tag>
            
            <tag> ONTAK </tag>
            
            <tag> Kruskal重构树 </tag>
            
            <tag> 权值线段树 </tag>
            
            <tag> 线段树合并 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「TJOI2015」概率论</title>
      <link href="/2018/07/17/loj2105/"/>
      <url>/2018/07/17/loj2105/</url>
      <content type="html"><![CDATA[<p><del>通过OEIS等传统艺能</del>易知答案为<span class="math inline">\(\frac{n(n + 1)}{2(2n - 1)}\)</span>。然后下面说一下怎么证明……</p><a id="more"></a><p>令虑<span class="math inline">\(n\)</span>个点的二叉树的方案数为<span class="math inline">\(H_n\)</span>（其实很显然就是卡塔兰数列），令<span class="math inline">\(n\)</span>个点的所有二叉树的叶子数的和为<span class="math inline">\(F_n\)</span>。</p><p>考虑推导<span class="math inline">\(H_n\)</span>的生成函数。我们知道（下面只考虑<span class="math inline">\(n &gt; 0\)</span>，我们钦定<span class="math inline">\(H_0 = 1\)</span>）： <span class="math display">\[H_n = \sum_{i = 0}^{n - 1} H_i H_{n - i - 1}\]</span> 所以说对于<span class="math inline">\(H\)</span>的生成函数，我们可以列方程： <span class="math display">\[H(x) = xH^2(x) + 1\]</span> 解得： <span class="math display">\[H(x) = \frac{1 \pm \sqrt{1 - 4x}}{2x}\]</span> 通过收敛性可以得知（具体地说……如果取得是加号，那么<span class="math inline">\(H(x)\)</span>在0处不收敛，与<span class="math inline">\(H(x)\)</span>的零次项系数的取值有限的事实明显背道相驰），应取<span class="math inline">\(H(x) = \frac{1 - \sqrt{1 - 4x}}{2x}\)</span>。</p><p>由于<span class="math inline">\(H\)</span>就是卡塔兰数列，所以有<span class="math inline">\(H_n = \frac{1}{n + 1}\binom{2n}{n}\)</span>。</p><p>然后对于<span class="math inline">\(F\)</span>，我们考虑左右儿子分别的贡献，就可以列式得（这里考虑<span class="math inline">\(n &gt; 1\)</span>的情况，<span class="math inline">\(F_1=1\)</span>）： <span class="math display">\[F_n = 2\sum_{i = 1}^{n - 1} F_i H_{n - i - 1}\]</span> 所以可以列出方程： <span class="math display">\[F(x) = 2xF(x)H(x) + x\]</span> 然后解得： <span class="math display">\[F(x) = \frac{x}{\sqrt{1 - 4x}}\]</span> 下面那个开根，看起来很不好弄。我们尝试用广义二项式定理展开它，就可以得到： <span class="math display">\[F(x) = \sum_{i = 1}^{+\infty} \binom{-0.5}{i - 1}(-4)^{i - 1} x^i\]</span> 这里牵扯到了任意实数的组合数……定义可以参考维基（具体是二项式定理那篇）。然后我们去考虑<span class="math inline">\(F_n\)</span>： <span class="math display">\[\begin{aligned}F_n &amp;= \frac{(-0.5)^{\underline{n - 1}}(-4)^{n - 1}}{(n - 1)!}\\&amp;=\frac{1}{(n - 1)!}\prod_{i = 0}^{n - 2} (-0.5 - i)\cdot (-4)\\&amp;=\frac{2^{n - 1}}{(n - 1)!}\prod_{i = 0}^{n - 2} (1 + 2i)\\&amp;=\frac{2^{n - 1}}{(n - 1)!}\cdot\frac{(2n - 2)!}{2^{n - 1}(n - 1)!}\\&amp;=\frac{(2n - 2)!}{(n - 1)!(n - 1)!}\\&amp;=\binom{2n - 2}{n - 1}\end{aligned}\]</span> 最后的答案是一个<span class="math inline">\(\frac{F_n}{H_n}\)</span>，不妨推一下： <span class="math display">\[\begin{aligned}\frac{F_n}{H_n} &amp;= \frac{(n + 1)\binom{2n - 2}{n - 1}}{\binom{2n}{n}}\\&amp;=\frac{(n + 1)(2n - 2)!n!n!}{(n-1)!(n-1)!(2n)!}\\&amp;=\frac{(n + 1)n^2}{2n(2n - 1)}\\&amp;=\frac{(n + 1)n}{2(2n - 1)}\end{aligned}\]</span> 终于搞出来了……</p><p>代码不用贴了吧……（逃</p>]]></content>
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生成函数 </tag>
            
            <tag> TJOI </tag>
            
            <tag> 广义二项式定理 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Min_25筛学习笔记</title>
      <link href="/2018/07/14/MIN-25-sieve/"/>
      <url>/2018/07/14/MIN-25-sieve/</url>
      <content type="html"><![CDATA[<p>一直想学洲阁筛吧……（<del>这就是我学Min_25筛的理由？</del>）</p><p>然后今天终于能yy出来洲阁筛的复杂度证明了……（然后不想写（逃</p><p>然后发现了一种更优越的求积性函数前缀和的方法，叫做Min_25筛的……（虽然算是烂大街了？）</p><a id="more"></a><h2 id="min_25筛">Min_25筛</h2><p>假设现在有一个积性函数<span class="math inline">\(f\)</span>，我们知道他在质数的幂<span class="math inline">\(p^c\)</span>上的表现<span class="math inline">\(f(p^c)\)</span>，然后要去求它的前缀和。</p><p>Min_25筛有个重要的要求就是……<span class="math inline">\(f(p)\)</span>（<span class="math inline">\(p\)</span>为质数）事一个低次多项式或者一个方便求前缀和的东西。下面就谈谈为什么……</p><p>我们先考虑对于所有状态<span class="math inline">\(\lfloor\frac{n}{x}\rfloor\)</span>，求出范围内所有质数的答案。</p><p>看起来蛮棘手的……但我们考虑模仿洲阁筛，定义一个状态<span class="math inline">\(g(i, x)\)</span>，表示<span class="math inline">\(x\)</span>范围内事质数或者和前<span class="math inline">\(i\)</span>个质数都互质的数的答案之和。如果说<span class="math inline">\(p_i\)</span>达到了<span class="math inline">\(\lfloor\sqrt{n}\rfloor\)</span>，那么显然<span class="math inline">\(g(i, x)\)</span>就是<span class="math inline">\(x\)</span>范围内所有质数的答案了（<span class="math inline">\(p_i\)</span>表示第<span class="math inline">\(i\)</span>个质数，下同）。</p><p>那么考虑转移（接下来出现的<span class="math inline">\(f(p_i)\)</span>是指质数的答案多项式中的某一项，因为答案多项式要分开考虑）……对所有<span class="math inline">\(x\geq p_i^2\)</span>，使用<span class="math inline">\(g(i, x) = g(i - 1, x) - f(p_i)(g(i - 1,\lfloor\frac{x}{p_i}\rfloor) - g(i - 1, p_i - 1))\)</span>转移（之所以后面又补了一个东西是因为要把多减去的含小于<span class="math inline">\(p_i\)</span>的质数的合数补回来）；至于<span class="math inline">\(x &lt; p_i^2\)</span>，我们会发现答案以后就不会变了，因为答案全部都是一堆质数的答案的和（其中不大于<span class="math inline">\(p_i\)</span>的一定不是合数，否则必定有小于等于<span class="math inline">\(p_i\)</span>的质因子；倘使大于<span class="math inline">\(p_i\)</span>的话，没有小于等于<span class="math inline">\(p_i\)</span>的质因子也只能有且仅有一个大于<span class="math inline">\(p_i\)</span>的质因子，当然就是质数了）。</p><p>这一步操作和洲阁筛几乎如出一辙，复杂度证明也完全一致（复杂度为<span class="math inline">\(O(\frac{n^{\frac{3}{4}}}{\ln n})\)</span>）。</p><p>但是光考虑质数的答案没完惹……再定义状态<span class="math inline">\(f(i, x)\)</span>表示<span class="math inline">\(x\)</span>范围内和小于<span class="math inline">\(p_i\)</span>的质数都互质的数的答案，最终答案显然就是<span class="math inline">\(f(1) + f(1, n)\)</span>。那么考虑一个很暴力的策略：</p><p>先把质数的答案都算进来（之前预处理了），然后考虑合数的答案。考虑枚举所有不小于<span class="math inline">\(p_i\)</span>的质数<span class="math inline">\(p\)</span>（假设是第<span class="math inline">\(j\)</span>个质数），如果说<span class="math inline">\(p^2 &gt; x\)</span>了那么就没法往下转移了（因为这样用上<span class="math inline">\(p\)</span>就没法构造合数了），<code>break</code>出来就行了；反之则枚举<span class="math inline">\(p\)</span>在数中所占的正指数<span class="math inline">\(e\)</span>，对于所有<span class="math inline">\(p^{e + 1}\leq x\)</span>，对答案做<span class="math inline">\(f(j + 1, \lfloor\frac{x}{p^e}\rfloor)f(p^e) + f(p^{e + 1})\)</span>的贡献（其实就是枚举是否选够了<span class="math inline">\(e\)</span>个<span class="math inline">\(p\)</span>，然后考虑只用<span class="math inline">\(p\)</span>的若干次方的情况）。</p><p>这个方法看起来极其暴力（甚至也没记忆化），但是复杂度很玄学（也很优秀）……可以参考朱老大的集训队论文。</p><h2 id="例题spoj-divcnt3">例题：SPOJ DIVCNT3</h2><p>这个题显然有<span class="math inline">\(f(p^c) = 3c + 1\)</span>，然后根据上面说的搞就行了……</p><p>代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">400005</span>;</span><br><span class="line"><span class="keyword">using</span> ll = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"><span class="keyword">int</span> prm[maxn]; ll A[maxn], B[maxn];</span><br><span class="line"><span class="function">ll <span class="title">sqr</span><span class="params">(ll x)</span> </span>&#123;</span><br><span class="line">  ll ret = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">while</span>((ret + <span class="number">1L</span>L) * (ret + <span class="number">1L</span>L) &lt;= x) ret ++;</span><br><span class="line">  <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ll n, S;</span><br><span class="line"><span class="keyword">int</span> cnt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">process</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  S = sqr(n); cnt = <span class="number">0</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"S : %lld\n"</span>, S);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= S; i ++) &#123;</span><br><span class="line">    A[i] = i;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= S; i ++) &#123;</span><br><span class="line">    B[i] = n / (ll(i));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= S; i ++) &#123;</span><br><span class="line">    <span class="keyword">if</span>(A[i] == A[i - <span class="number">1</span>]) <span class="keyword">continue</span>;</span><br><span class="line">    ll v = A[i - <span class="number">1</span>], lim = (ll(i)) * (ll(i));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= (S / i); j ++) &#123;</span><br><span class="line">      B[j] -= B[j * i] - v;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = S / i + <span class="number">1</span>; j &lt;= S; j ++) &#123;</span><br><span class="line">      ll th = n / (ll(j)); <span class="keyword">if</span>(th &lt; lim) <span class="keyword">break</span>;</span><br><span class="line">      B[j] -= A[th / (ll(i))] - v;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = S; (ll)j &gt;= lim; j --) &#123;</span><br><span class="line">      A[j] -= A[j / (ll(i))] - v;</span><br><span class="line">    &#125;</span><br><span class="line">    prm[++ cnt] = i;</span><br><span class="line">  &#125;</span><br><span class="line">  prm[++ cnt] = S + <span class="number">1L</span>L;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">query</span><span class="params">(ll x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(x &lt;= S) &#123;</span><br><span class="line">    <span class="keyword">return</span> A[x];</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> B[n / x];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">calc</span><span class="params">(ll m, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(m &lt; (ll)prm[x]) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  ll ret = <span class="number">4L</span>L * (query(m) - query(prm[x] - <span class="number">1</span>));</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = x; i &lt;= cnt; i ++) &#123;</span><br><span class="line">    ll mul = prm[i];</span><br><span class="line">    <span class="keyword">if</span>(mul * (ll(prm[i])) &gt; m) <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; ; j ++) &#123;</span><br><span class="line">      <span class="keyword">if</span>(mul * (ll(prm[i])) &gt; m) <span class="keyword">break</span>;</span><br><span class="line">      ret += calc(m / mul, i + <span class="number">1</span>) * (ll(<span class="number">3</span> * j + <span class="number">1</span>)) + (ll(<span class="number">3</span> * j + <span class="number">4</span>));</span><br><span class="line">      mul *= (ll(prm[i]));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> T; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</span><br><span class="line">  <span class="keyword">while</span>(T --) &#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%lld"</span>, &amp;n);</span><br><span class="line">    process();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, calc(n, <span class="number">1</span>) + <span class="number">1L</span>L);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 洲阁筛 </tag>
            
            <tag> Min_25筛 </tag>
            
            <tag> SPOJ </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「BZOJ 4261」建设游乐场</title>
      <link href="/2018/07/11/BZOJ4261/"/>
      <url>/2018/07/11/BZOJ4261/</url>
      <content type="html"><![CDATA[<h2 id="description">Description</h2><p>给定一个<span class="math inline">\(n\times m\)</span>网格图，其中有一些点是障碍，有一些点是平原。</p><p>现在要求你用若干无重边无自环的不相交简单环覆盖所有平原。有一些点<span class="math inline">\((i, j)\)</span>如果满足经过的两条边一条是横着的一套是竖着的那么就会获得<span class="math inline">\(V_{i, j}\)</span>的收益。</p><p>求是否有解，如果有解的话输出最大收益。</p><p><span class="math inline">\(n\le 150\)</span>，<span class="math inline">\(m\le 30\)</span>，<span class="math inline">\(0\le V_{i, j}\le 100\)</span>。</p><a id="more"></a><h2 id="solution">Solution</h2><p>算是坑了很久的传统艺能题，，，</p><p>首先先来一步传统艺能：假设所有收益都能获得，然后问题转化成使笋丝尽可能小，也就变成了如果有一个地方是直的话就会有笋丝。</p><p>考虑黑白染色，我们钦点只从黑点往白点连边，这样的话每个黑点要向两个不同的白点（不能走到障碍上）连边。我们要希望所有点都弯着走，我们大可以把所有点全部拆成两个点，一个表示横着走一个表示竖着走，分别向源/汇连容量为1的边，同时他们再往相邻的横着/竖着相邻的点连容量为1的边。</p><p>但问题是有些时候有些点肯定只能直着走。那可以用“弯直转换”来表示，具体方法就是把一个点拆出来的横竖点互连容量为1费用为<span class="math inline">\(V_{i, j}\)</span>的边。</p><p>最后关于是否有解的判定……最后的流量就是原网格图中用了的边的数量，对于每个环的边数都等于点数，因此总边数要等于总点数，因此最后的流量要等于平地的总数量才算有解。</p><h2 id="code">Code</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = (<span class="number">150</span> * <span class="number">30</span>) * <span class="number">2</span> + <span class="number">5</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span></span><br><span class="line">  <span class="keyword">int</span> u, v, cap, flow, cost;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G[maxn];</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;Edge&gt; E;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add_edge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> cap, <span class="keyword">int</span> cost)</span> </span>&#123;</span><br><span class="line">  E.push_back((Edge)&#123;u, v, cap, <span class="number">0</span>, cost&#125;);</span><br><span class="line">  E.push_back((Edge)&#123;v, u, <span class="number">0</span>, <span class="number">0</span>, -cost&#125;);</span><br><span class="line">  <span class="keyword">int</span> m = E.size();</span><br><span class="line">  G[u].push_back(m - <span class="number">2</span>); G[v].push_back(m - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[maxn], d[maxn], p[maxn];</span><br><span class="line"><span class="keyword">bool</span> inq[maxn];</span><br><span class="line"><span class="keyword">int</span> num;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">spfa</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> t, <span class="keyword">int</span> &amp;flow, <span class="keyword">int</span> &amp;cost)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">std</span>::fill(a, a + num + <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="built_in">std</span>::fill(d, d + num + <span class="number">1</span>, INF);</span><br><span class="line">  <span class="built_in">std</span>::fill(p, p + num + <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="built_in">std</span>::fill(inq, inq + num + <span class="number">1</span>, <span class="literal">false</span>);</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; Q; Q.push(s);</span><br><span class="line">  d[s] = <span class="number">0</span>; a[s] = INF; inq[s] = <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">while</span>(!Q.empty()) &#123;</span><br><span class="line">    <span class="keyword">int</span> u = Q.front(); Q.pop(); inq[u] = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; G[u].size(); i ++) &#123;</span><br><span class="line">      Edge &amp;e = E[G[u][i]]; <span class="keyword">int</span> v = e.v;</span><br><span class="line">      <span class="keyword">if</span>(e.cap &gt; e.flow &amp;&amp; d[u] + e.cost &lt; d[v]) &#123;</span><br><span class="line">        d[v] = d[u] + e.cost; p[v] = G[u][i];</span><br><span class="line">        a[v] = <span class="built_in">std</span>::min(a[u], e.cap - e.flow);</span><br><span class="line">        <span class="keyword">if</span>(!inq[v]) Q.push(v), inq[v] = <span class="literal">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(d[t] &gt;= INF) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  flow += a[t]; cost += d[t] * a[t];</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"flow delta : %d\n"</span>, a[t]);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"cost delta : %d\n"</span>, d[t] * a[t]);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">  <span class="keyword">int</span> u = t;</span><br><span class="line">  <span class="keyword">while</span>(u != s) &#123;</span><br><span class="line">    Edge &amp;e = E[p[u]];</span><br><span class="line">    e.flow += a[t]; E[p[u] ^ <span class="number">1</span>].flow -= a[t];</span><br><span class="line">    u = e.u;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">MCMF</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> t, <span class="keyword">int</span> &amp;flow, <span class="keyword">int</span> &amp;cost)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">while</span>(spfa(s, t, flow, cost));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">get_p</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j, <span class="keyword">int</span> t)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> ret = (i - <span class="number">1</span>) * m + j;</span><br><span class="line">  ret = ret * <span class="number">2</span> - <span class="number">1</span> + t;</span><br><span class="line">  <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> A[<span class="number">155</span>][<span class="number">35</span>], V[<span class="number">155</span>][<span class="number">35</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</span><br><span class="line">  <span class="keyword">int</span> s = <span class="number">0</span>, t = n * m * <span class="number">2</span> + <span class="number">1</span>; num = t;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j ++) &#123;</span><br><span class="line">      <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;A[i][j]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j ++) &#123;</span><br><span class="line">      <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;V[i][j]);</span><br><span class="line">      <span class="keyword">if</span>(!A[i][j]) ans += V[i][j];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j ++) &#123;</span><br><span class="line">      <span class="keyword">if</span>(A[i][j]) <span class="keyword">continue</span>;</span><br><span class="line">      cnt ++; <span class="keyword">int</span> p0 = get_p(i, j, <span class="number">0</span>), p1 = get_p(i, j, <span class="number">1</span>);</span><br><span class="line">      add_edge(p0, p1, <span class="number">1</span>, V[i][j]); add_edge(p1, p0, <span class="number">1</span>, V[i][j]);</span><br><span class="line">      <span class="keyword">if</span>((i + j) &amp; <span class="number">1</span>) &#123;</span><br><span class="line">        add_edge(p0, t, <span class="number">1</span>, <span class="number">0</span>); add_edge(p1, t, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        add_edge(s, p0, <span class="number">1</span>, <span class="number">0</span>); add_edge(s, p1, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span>(i &gt; <span class="number">1</span> &amp;&amp; !A[i - <span class="number">1</span>][j]) &#123;</span><br><span class="line">          add_edge(p0, get_p(i - <span class="number">1</span>, j, <span class="number">0</span>), <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(i &lt; n &amp;&amp; !A[i + <span class="number">1</span>][j]) &#123;</span><br><span class="line">          add_edge(p0, get_p(i + <span class="number">1</span>, j, <span class="number">0</span>), <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(j &gt; <span class="number">1</span> &amp;&amp; !A[i][j - <span class="number">1</span>]) &#123;</span><br><span class="line">          add_edge(p1, get_p(i, j - <span class="number">1</span>, <span class="number">1</span>), <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(j &lt; m &amp;&amp; !A[i][j + <span class="number">1</span>]) &#123;</span><br><span class="line">          add_edge(p1, get_p(i, j + <span class="number">1</span>, <span class="number">1</span>), <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"tot : %d\n"</span>, ans);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">  <span class="keyword">int</span> flow = <span class="number">0</span>, cost = <span class="number">0</span>;</span><br><span class="line">  MCMF(s, t, flow, cost);</span><br><span class="line">  <span class="keyword">if</span>(flow &lt; cnt) &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"-1"</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans - cost);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BZOJ </tag>
            
            <tag> 费用流 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>贝尔级数在积性函数毒瘤题中的应用</title>
      <link href="/2018/07/11/bell-series/"/>
      <url>/2018/07/11/bell-series/</url>
      <content type="html"><![CDATA[<p>嗯，OC！</p><p>一直以来，数论生成函数在积性函数毒瘤题中的应用都不是很多……</p><p>数论函数的生成函数大概有三种：狄利克雷级数（也叫数论生成函数）、贝尔级数、Lambert级数。Lambert级数不了解，狄利克雷级数太复杂（需要一些复分析的水平，恰好我没有……），能派上用场的也就只有贝尔级数力，，，</p><p>下文主要介绍贝尔级数的基本概念，在狄利克雷卷积中的应用，以及在积性函数求和（对我书得就事杜教筛）中的一些微小的应用……</p><a id="more"></a><h2 id="贝尔级数的概念">贝尔级数的概念</h2><h3 id="贝尔级数的定义">贝尔级数的定义</h3><p>贝尔级数是一种形式幂级数。对于给定的数论函数<span class="math inline">\(f\)</span>和质数<span class="math inline">\(p\)</span>，我们定义<span class="math inline">\(f\)</span>模<span class="math inline">\(p\)</span>的贝尔级数为： <span class="math display">\[f_p(x)=\sum_{i = 0}^{+\infty} f(p^i)x^i\]</span></p><h3 id="贝尔级数的基本性质">贝尔级数的基本性质</h3><h4 id="唯一定理">唯一定理</h4><p>对于两个积性函数<span class="math inline">\(f\)</span>和<span class="math inline">\(g\)</span>，如果对于任意质数<span class="math inline">\(p\)</span>都有<span class="math inline">\(f\)</span>和<span class="math inline">\(g\)</span>模<span class="math inline">\(p\)</span>的贝尔级数相同，那两者相同。</p><p>这个定理我局的还事挺好理解的……两个积性函数在任何质数的幂的表现都相同，那么两者也相同。</p><p>因为一般的数论函数没有这么优秀的性质……所以下面提到的贝尔级数的应用基本上都针对积性函数……</p><h4 id="狄利克雷卷积">狄利克雷卷积</h4><p>对任意两个数论函数<span class="math inline">\(f\)</span>和<span class="math inline">\(g\)</span>，有<span class="math inline">\((f\ast g)_p(x) = f_p(x)\cdot g_p(x)\)</span>。</p><p>这是贝尔级数最有用的性质了……（没这个性质用它干啥？）</p><h4 id="完全积性函数的贝尔级数">完全积性函数的贝尔级数</h4><p>对于一个完全积性函数<span class="math inline">\(f\)</span>，有<span class="math inline">\(f_p(x)=\frac{1}{1 - f(p)x}\)</span>。</p><p>这个也不难理解，用的就是等比数列求和公式。不过好在事形式幂级数，并不需要考虑收敛的问题……</p><h3 id="常用积性函数函数的贝尔级数">常用积性函数函数的贝尔级数</h3><p>关于狄利克雷卷积的单位元<span class="math inline">\(\epsilon\)</span>（<span class="math inline">\(\epsilon(x) = [x=1]\)</span>），不必自说当然是<span class="math inline">\(1\)</span>。</p><p>首先对于<span class="math inline">\(f(x) = x^k(k\in N^0)\)</span>这种东西，根据完全积性函数的贝尔级数公式可知有<span class="math inline">\(f_p(x)=\frac{1}{1 - p^kx}\)</span>。</p><p>莫比乌斯函数比较有意思。显然<span class="math inline">\(\mu(1) = 1\)</span>，<span class="math inline">\(\mu(p) = -1\)</span>，但是<span class="math inline">\(\mu(p^k)=0(k\ge 2)\)</span>。所以说其贝尔级数就是<span class="math inline">\(1-x\)</span>。类似我们可以推导得<span class="math inline">\(\mu^2\)</span>的贝尔级数为<span class="math inline">\(1+x\)</span>。</p><p>欧拉函数直接推有些棘手……但注意到我们知道<span class="math inline">\(\varphi\ast 1 = \mathrm{id}\)</span>，反演一下可以得知<span class="math inline">\(\mathrm{id}\ast\mu =\varphi\)</span>，由此可得<span class="math inline">\(\varphi_p(x)=\frac{1 - x}{1 - px}\)</span>。</p><p>接下来介绍一个非常好玩的函数：刘维尔函数。在此之前先定义<span class="math inline">\(\Omega(n)\)</span>表示<span class="math inline">\(n\)</span>的<strong>可重复</strong>质因子数（因此<span class="math inline">\(\Omega(4) = 2\)</span>），那么刘维尔函数<span class="math inline">\(\lambda(x) = (-1)^{\Omega(x)}\)</span>，这个函数很显然是完全积性函数，故<span class="math inline">\(\lambda_p(x)=\frac{1}{1 + x}\)</span>。这个函数有些时候是肥肠有用的。</p><p>然后考虑约数好兄弟<span class="math inline">\(\sigma_k\)</span>。很显然<span class="math inline">\(\sigma_k = \mathrm{id}^k\ast 1\)</span>，因此可以推出<span class="math inline">\((\sigma_k)_p(x)=\frac{1}{1 - p^kx}\cdot\frac{1}{1 - x} = \frac{1}{1 - (1 + p^k)x + p^kx^2}\)</span>。</p><p>至此常见积性函数已经推完力，，，</p><h2 id="贝尔级数在狄利克雷卷积中的应用">贝尔级数在狄利克雷卷积中的应用</h2><p>这个还算是很显然吧……</p><p>举个例子，让你证<span class="math inline">\((\mathrm{id}\cdot\mu)\ast\mathrm{id} = \epsilon\)</span>。</p><p>这个东西用传统的计数解方法当然可行，但是多麻烦事有目共睹的（甚至于有些东西被我们的当结论记了）。用贝尔级数的话这个等式不就是<span class="math inline">\((1 - px)\cdot\frac{1}{1 - px} = 1\)</span>嘛，非常简单。</p><p>还有一些比较复杂的例子，大家可以自行寻找。</p><h2 id="贝尔级数在杜教筛中的应用">贝尔级数在杜教筛中的应用</h2><p>这个东西算是最大应用了吧……</p><p>应用主要分为两部分：你知道<span class="math inline">\(f\)</span>本身是啥，但是不知道找啥去卷比较好；你不知道<span class="math inline">\(f\)</span>本身是啥（你只知道它在质数的幂上表现），但你还是要杜教筛。</p><h3 id="利用贝尔级数构造合适的狄利克雷卷积">利用贝尔级数构造合适的狄利克雷卷积</h3><p>给一道题吧：求<span class="math inline">\(\mu^2\ast (\mathrm{id}\cdot\mu)\)</span>这个东西的前缀和，<span class="math inline">\(n\le 10^{11}\)</span>。</p><p>如果你不知道贝尔级数，你可能需要靠背上面提到的那个用传统方法很难证的结论来做这个题……</p><p>但如果说你知道贝尔级数的话，你发现原函数贝尔级数为<span class="math inline">\((1 + x)(1 - px)\)</span>，然后我们想肯定要消掉一部分或者全部式子。我们考虑卷上一个<span class="math inline">\(\mathrm{id}\)</span>，弄完了之后的贝尔级数为<span class="math inline">\(1 + x\)</span>，也就是<span class="math inline">\(\mu^2\)</span>。</p><p><span class="math inline">\(\mathrm{id}\)</span>的前缀和自然好说，但是<span class="math inline">\(\mu^2\)</span>的前缀和咋整？</p><p>其实<span class="math inline">\(\mu^2\)</span>就是判断它是否没有完全平方因子。因此我们直接枚举那个因子的平方根就好了，但是这样会重复，因此考虑用<span class="math inline">\(\mu\)</span>容斥一下，得到： <span class="math display">\[\sum_{i = 1}^n\mu^2(i)=\sum_{i = 1}^{\lfloor\sqrt{n}\rfloor}\mu(i)\lfloor\frac{n}{i^2}\rfloor\]</span> 因此<span class="math inline">\(\mu^2\)</span>的前缀和是可以根号复杂度来求的，不会影响杜教筛总的转移复杂度。因此总复杂度为<span class="math inline">\(O(n^{\frac{2}{3}})\)</span>。</p><h3 id="在不知道函数本身是啥的时候杜教筛">在不知道函数本身是啥的时候杜教筛</h3><p>还是给一道题：</p><p>有一个积性函数<span class="math inline">\(f(x)\)</span>，你不知道它本身是啥，但是你知道他满足以下性质：</p><ul><li><span class="math inline">\(f(1) = 1\)</span>。</li><li>对于质数<span class="math inline">\(p\)</span>和正整数<span class="math inline">\(a\)</span>，有<span class="math inline">\(f(p^a) = p^a + (-1)^a\)</span>。</li></ul><p>求这玩意的前缀和，<span class="math inline">\(n\le 10^{11}\)</span>。</p><p>其实你通过OEIS可以知道这个函数本身是啥（逃），但考虑到那样你也很难用常规手段杜教筛所以还事没啥用……</p><p>首先考虑去构造这个玩意的贝尔级数。它看起来很像事<span class="math inline">\(\mathrm{id}\)</span>和<span class="math inline">\(\lambda\)</span>的贝尔级数加一下，但是考虑到<span class="math inline">\(f(1) = 1\)</span>因此还要再减个1。最后得到： <span class="math display">\[f_p(x)=\frac{1}{1 - px} + \frac{1}{1 + x} - 1\]</span> 我们想要卷上一个<span class="math inline">\(g\)</span>，那些分母看起来很不顺眼，干脆把他们都消掉了吧！因此我们规定<span class="math inline">\(g_p(x) = (1 - px)(1 + x)\)</span>（因此我们得知<span class="math inline">\(g = (\mathrm{id}\cdot\mu)\ast\mu^2\)</span>）。卷出来之后发现： <span class="math display">\[(f\ast g)_p(x) = 1 + x + 1 - px - 1 - x + px + px^2 = 1 + px^2\]</span> 然后我们弄了一大半顿我们还是不知道<span class="math inline">\(f\ast g\)</span>具体是啥……但是我们观察到一点非常重要的性质：若<span class="math inline">\((f\ast g)(x)\ne 0\)</span>，那么<span class="math inline">\(x\)</span>起码也得是完全平方数，并且<span class="math inline">\(\mu^2(\sqrt{x}) = 1\)</span>，并且对答案的贡献为<span class="math inline">\(\sqrt{x}\)</span>！</p><p>这下<span class="math inline">\(f\ast g\)</span>虽然还不知道是啥，但是起码它前缀和好求了！我们对于对答案可能有贡献的<span class="math inline">\(x\)</span>枚举其算术平方根即可，写出来就是： <span class="math display">\[\sum_{i = 1}^n(f\ast g)(i) = \sum_{i = 1}^{\lfloor\sqrt{n}\rfloor}\mu^2(i)i\]</span> 这样的话求<span class="math inline">\(f\ast g\)</span>的前缀和的复杂度就已经降到<span class="math inline">\(O(\sqrt{n})\)</span>了，更进一步我们发现这个式子的答案只和<span class="math inline">\(\lfloor\sqrt{n}\rfloor\)</span>有关，所以我们用<span class="math inline">\(O(\sqrt{n})\)</span>的时间预处理所有这种和之后<span class="math inline">\(O(1)\)</span>查询就好了。</p><p>剩下唯一的硬骨头就是<span class="math inline">\(g\)</span>的前缀和，这个上一小节已经讲了。</p><p><del>虽说这玩意蛮有用的……但是无法阻止杜教筛过气，常熟优秀还好想的MIN_25筛已经要dssq力（悲）</del></p>]]></content>
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 狄利克雷卷积 </tag>
            
            <tag> 莫比乌斯反演 </tag>
            
            <tag> 杜教筛 </tag>
            
            <tag> 贝尔级数 </tag>
            
            <tag> 生成函数 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>一些测试</title>
      <link href="/2018/07/11/test/"/>
      <url>/2018/07/11/test/</url>
      <content type="html"><![CDATA[<h1 id="一级标题">一级标题</h1><h2 id="二级标题">二级标题</h2><h3 id="三级标题">三级标题</h3><h4 id="四级标题">四级标题</h4><h5 id="五级标题">五级标题</h5><p>行内公式：<span class="math inline">\(\int_{-\infty}^{+\infty}e^{x^2}\mathrm{d}x\)</span>。</p><p>行间公式： <span class="math display">\[\int u\mathrm{d}v = uv - \int v\mathrm{d}u\]</span></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// C++ code</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> a, b; <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;a, &amp;b);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, a + b); <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>嗯，OC！</p>]]></content>
      
      <categories>
          
          <category> 测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试 </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
